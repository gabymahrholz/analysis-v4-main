library(webexercises)
install.packages(c("abind", "afex", "archive", "askpass", "bayestestR", "bit", "bit64", "bitops", "bookdown", "broom", "bslib", "car", "caTools", "checkmate", "cli", "colorspace", "commonmark", "correlation", "corrplot", "cowplot", "cowsay", "cpp11", "credentials", "curl", "data.table", "datardis", "datawizard", "DEoptimR", "Deriv", "DescTools", "diffobj", "digest", "doBy", "e1071", "effectsize", "emmeans", "evaluate", "expm", "fontawesome", "fs", "generics", "gert", "ggeffects", "ggplot2", "gh", "gld", "glue", "GPArotation", "gtable", "haven", "Hmisc", "httpuv", "httr2", "insight", "janitor", "jsonlite", "knitr", "later", "lavaan", "lme4", "lmom", "lubridate", "markdown", "MatrixModels", "matrixStats", "microbenchmark", "mime", "miniUI", "minqa", "modelbased", "modeltools", "multcomp", "mvtnorm", "nloptr", "openssl", "pander", "parameters", "patchwork", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgdown", "processx", "profvis", "promises", "ps", "psych", "purrr", "quantreg", "quarto", "R6", "ragg", "rcompanion", "Rcpp", "RcppEigen", "readxl", "rlang", "rmarkdown", "robustbase", "rprojroot", "rstudioapi", "sandwich", "sass", "scales", "see", "sessioninfo", "shiny", "sjmisc", "sjPlot", "sjstats", "SparseM", "stringi", "svglite", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tinytex", "tzdb", "usethis", "utf8", "uuid", "waldo", "withr", "xfun", "xml2", "yaml", "zip", "zoo"))
library(webexercises)
my_packages <- library()$results[,1]
"webexcercises" %in% tolower(my_packages)
my_packages
(.packages())
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
View(ip)
"webexercises" %in% tolower(my_packages)
my_packages <- library()$results[,1:2]
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
View(ip)
ip <- as.data.frame(installed.packages()[,c(1,3)])
library(tidyverse)
ip <- as.data.frame(installed.packages()[,c(1,3)])
write_csv(ip, "ip.csv")
install.packages("webexercises")
install.packages("car")
install.packages("booktem")
install.packages("bookdown")
install.packages("correlation")
install.packages("cowplot")
install.packages("devtools")
install.packages("effectsize")
install.packages("emmeans")
install.packages("ggExtra")
install.packages("ggthemes")
install.packages("janitor")
install.packages("kableExtra")
install.packages("lme4#")
install.packages("lme4")
install.packages("lsr")
install.packages("lubridate")
install.packages("magrittr")
install.packages("palmerpenguins")
install.packages("purrr")
install.packages("pwr")
install.packages("qualtRics")
install.packages("qqplotr")
install.packages("scales")
install.packages("viridis")
install.packages("wesanderson")
library(webexercises)
install.packages("see")
library(tidyverse)
dog_data_raw <- read_csv("dog_data_raw.csv")
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_long)
View(dog_data_raw)
head(dog_data_raw)
colnames(dog_data_raw)
glimpse(dog_data_raw)
dog_data_raw <- read_csv("dog_data_raw.csv")
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_long)
View(dog_data_raw)
View(dog_data_long)
View(dog_data_long)
janitor::clean_names("Individual Walkthrough Chapters", case = screamin_snake)
janitor::clean_names(c("Individual Walkthrough Chapters"), case = screamin_snake)
toupper("Individual Walkthrough Chapters")
toupper("In-lab: Pair-Coding")
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
View(dog_data_raw)
data_prp <- read_csv("data/prp_data_reduced.csv")
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age
demo_total
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
demo_gender3 <- data_prp %>%
filter(Gender == 3) %>%
summarise(n = n(),
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_gender12 <- data_prp %>%
filter(Gender %in% c(1,2)) %>%
summarise(n = n(),
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
View(demo_gender12)
demo_gender12 <- data_prp %>%
filter(Gender %in% c(1,2)) %>%
group_by(Gender) %>%
summarise(n = n(),
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
View(demo_gender3)
View(demo_gender12)
View(demo_gender3)
View(demo_by_gender)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
library(lsr)
library(scales)
library(qqplotr)
library(car)
library(pwr)
library(rcompanion)
data_ballou <- read_csv("data/data_ballou_reduced.csv")
data_wemwbs <- data_ballou %>%
pivot_longer(cols = wemwbs_1:wemwbs_14, names_to = "Questions", values_to = "Scores") %>%
group_by(pid) %>%
summarise(wemwbs_sum = sum(Scores))
data_ballou <- data_ballou %>%
mutate(gender = factor(gender,
levels = c("Woman", "Man", "Non-binary")),
eduLevel = factor(eduLevel,
levels = c("Completed Secondary School", "Some University but no degree", "University Bachelors Degree", "Vocational or Similar", "Graduate or professional degree (MA, MS, MBA, PhD, etc)"))) %>%
left_join(data_wemwbs)
ggplot(chi_square, aes(x = eduLevel, fill = gender)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d(name = "Gender") +
scale_x_discrete(name = "Level of Education",
labels = label_wrap(12)) +
scale_y_continuous(name = "Count") +
theme_classic()
chi_square <- data_ballou %>%
select(pid, gender, eduLevel)
chi_square_frequency <- chi_square %>%
count(gender, eduLevel) %>%
pivot_wider(names_from = eduLevel, values_from = n)
chi_square_frequency
ggplot(chi_square, aes(x = eduLevel, fill = gender)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d(name = "Gender") +
scale_x_discrete(name = "Level of Education",
labels = label_wrap(12)) +
scale_y_continuous(name = "Count") +
theme_classic()
chi_square_df <- as.data.frame(chi_square)
associationTest(formula = ~ eduLevel + gender, data = chi_square_df)
pwr.chisq.test(N = 1083,
df = 8,
sig.level = 0.05,
power = 0.8)
View(chi_square_df)
View(chi_square_frequency)
w = 0.079 * sqrt(3-1)
w = 0.079 * sqrt(3-1)
w
View(chi_square_df)
View(chi_square_frequency)
View(chi_square)
pwr.t.test(n = 80, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "two.sided")
