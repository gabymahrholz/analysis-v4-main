{"title":"Data wrangling I","markdown":{"headingText":"Data wrangling I","headingAttr":{"id":"sec-wrangling","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r include=FALSE}\nlibrary(webexercises)\n```\n\n## Intended Learning Outcomes {.unnumbered}\n\nIn the next two chapters, we will build on the data wrangling skills from level 1. We will revisit all the functions you have already encountered (and might have forgotten over the summer break) and introduce 2 or 3 new functions. These two chapters will provide an opportunity to revise and apply the functions to a novel dataset.\n\nBy the end of this chapter, you should be able to:\n\n-   apply familiar data wrangling functions to novel datasets\n-   read and interpret error messages\n-   realise there are several ways of getting to the results\n-   export data objects as csv files\n\nThe main purpose of this chapter and @sec-wrangling2 is to wrangle your data into shape for data visualisation (@sec-dataviz and @sec-dataviz2). For the two chapters, we will:\n\n1.  calculate demographics\n2.  tidy 3 different questionnaires with varying degrees of complexity\n3.  solve an error mode problem\n4.  join all data objects together\n\n## [Individual Walkthrough]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\nBefore we start, we need to set up some things.\n\n\n## Activity 1: Setup\n\n* We will be working on the **dataset by Pownall et al. (2023)** again, which means we can still use the project we created last week. The data files will already be there, so no need to download them again.\n* To **open the project** in RStudio, go to the folder in which you stored the project and the data last time, and double click on the project icon.\n* **Create a new `.Rmd` file** for chapter 2 and save it to your project folder. Name it something meaningful (e.g., ‚Äúchapter_02.Rmd‚Äù, ‚Äú02_data_wrangling.Rmd‚Äù). See @sec-rmd if you need some guidance.\n* In your newly created `.Rmd` file, delete everything below line 12 (after the set-up code chunk).\n\n\n\n## Activity 2: Load in the libraries and read in the data\n\nWe will use `tidyverse` today, and we want to create a data object `data_prp` that stores the data from the file `prp_data_reduced.csv`.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n\n## Hint\n\n```{r eval=FALSE}\nlibrary(???)\ndata_prp <- read_csv(\"???\")\n```\n\n```{r include=FALSE, message=TRUE}\n## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path\nlibrary(tidyverse)\ndata_prp <- read_csv(\"data/prp_data_reduced.csv\")\n```\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n```{r eval=FALSE}\nlibrary(tidyverse)\ndata_prp <- read_csv(\"prp_data_reduced.csv\")\n```\n\n:::\n\nIf you need a quick reminder what the dataset was about, have a look at the abstract in @sec-download_data_ch1. We also addressed the changes we made to the dataset there.\n\nAnd remember to have a quick `glimpse()` at your data.\n\n\n\n## Activity 3: Calculating demographics\n\nLet‚Äôs start with some simple data-wrangling steps to compute demographics for our original dataset, `data_prp`. First, we want to determine how many participants took part in the study by Pownall et al. (2023) and compute the mean age and the standard deviation of age for the sample.\n\n\n\n### ... for the full sample using `summarise()`\n\nThe `summarise()` function is part of the **\"Wickham Six\"** alongside `group_by()`, `select()`, `filter()`, `mutate()`, and `arrange()`. You used them plenty of times last year.\n\nWithin `summarise()`, we can use the `n()` function, which calculates the number of rows in the dataset. Since each row corresponds to a unique participant, this gives us the total number of participants.\n\nTo calculate the mean age and the standard deviation of age, we need to use the functions `mean()` and `sd()` on the column `Age` respectively.\n\n\n```{r, error=TRUE}\ndemo_total <- data_prp %>% \n  summarise(n = n(), # participant number\n            mean_age = mean(Age), # mean age\n            sd_age = sd(Age)) # standard deviation of age\n\ndemo_total\n```\n\nR did not give us an error message per se, but the output is not quite as expected either. There are `NA` values in the `mean_age` and `sd_age` columns. Looking at the warning message and at `Age`, can you explain what happened?\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Answer\n\nThe warning message says: `argument is not numeric or logical: returning NA` If we look at the `Age` column more closely, we can see that it's a character data type.\n\n:::\n\n\n\n#### Fixing `Age` {.unnumbered}\n\nMight be wise to look at the unique answers in column `Age` to determine what is wrong. We can do that with the function `distinct()`.\n\n```{r results='hide'}\nage_distinct <- data_prp %>% \n  distinct(Age)\n\nage_distinct\n```\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Show the unique values of `Age`.\n\n```{r echo=FALSE}\nage_distinct\n```\n:::\n\n::: columns\n\n::: column\n\nOne cell has the string \"years\" added to their number 25, which has converted the entire column into a character column.\n\nWe can easily fix this by extracting only the numbers from the column and converting it into a numeric data type. The `parse_number()` function, which is part of the `tidyverse` package, handles both steps in one go (so there‚Äôs no need to load additional packages).\n\nWe will combine this with the `mutate()` function to create a new column called `Age` (containing those numeric values), effectively replacing the old `Age` column (which had the character values).\n\n:::\n\n::: column\n\n![parse_number() illustration by Allison Horst (see [https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){target=\"_blank\"})](images/parse_number.png){width=\"95%\"}\n\n:::\n\n:::\n\n```{r}\ndata_prp <- data_prp %>% \n  mutate(Age = parse_number(Age))\n\ntypeof(data_prp$Age) # fixed\n```\n\n\n\n#### Computing summary stats {.unnumbered}\n\nExcellent. Now that the numbers are in a numeric format, let's try calculating the demographics for the total sample again.\n\n```{r}\ndemo_total <- data_prp %>% \n  summarise(n = n(), # participant number\n            mean_age = mean(Age), # mean age\n            sd_age = sd(Age)) # standard deviation of age\n\ndemo_total\n```\n\nEven though there's no error or warning, the table still shows `NA` values for `mean_age` and `sd_age`. So, what could possibly be wrong now?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Answer\n\nDid you notice that the `Age` column in `age_distinct` contains some missing values (`NA`)? To be honest, it's easier to spot this issue in the actual R output than in the printed HTML page.\n\n:::\n\n\n\n#### Computing summary stats - third attempt {.unnumbered}\n\nTo ensure R ignores missing values during calculations, we need to add the extra argument `na.rm = TRUE` to the `mean()` and `sd()` functions.\n\n```{r}\ndemo_total <- data_prp %>% \n  summarise(n = n(), # participant number\n            mean_age = mean(Age, na.rm = TRUE), # mean age\n            sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age\n\ndemo_total\n```\n\nFinally, we‚Äôve got it! ü•≥ Third time's the charm!\n\n\n\n### ... per gender using `summarise()` and `group_by()`\n\nNow we want to compute the summary statistics for each gender. The code inside the `summarise()` function remains unchanged; we just need to use the `group_by()` function beforehand to tell R that we want to compute the summary statistics for each group separately. It‚Äôs also a good practice to use `ungroup()` afterwards, so you are not taking groupings forward unintentionally.\n\n```{r}\ndemo_by_gender <- data_prp %>% \n  group_by(Gender) %>% # split data up into groups (here Gender)\n  summarise(n = n(), # participant number \n            mean_age = mean(Age, na.rm = TRUE), # mean age \n            sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age\n  ungroup()\n\ndemo_by_gender\n```\n\n\n\n### Adding percentages\n\nSometimes, it may be useful to calculate percentages, such as for the gender split. You can do this by adding a line within the `summarise()` function to perform the calculation. All we need to do is take the number of female, male, and non-binary participants (stored in the `n` column of `demo_by_gender`), divide it by the total number of participants (stored in the `n` column of `demo_total`), and multiply by 100. Let's add `percentage` to the `summarise()` function of `demo_by_gender`. Make sure that the code for `percentages` is placed after the value for `n` has been computed.\n\nAccessing the value of `n` for the different gender categories is straightforward because we can refer back to it directly. However, since the total number of participants is stored in a different data object, we need to use a base R function to access it ‚Äì specifically the `$` operator. To do this, you simply type the name of the data object (in this case, `demo_total`), followed by the `$` symbol (with no spaces), and then the name of the column you want to retrieve (in this case, `n`). The general pattern is `data$column`.\n\n```{r}\ndemo_by_gender <- data_prp %>% \n  group_by(Gender) %>% \n  summarise(n = n(), \n            # n from the line above divided by n from demo_total *100\n            percentage = n/demo_total$n *100, \n            mean_age = mean(Age, na.rm = TRUE), \n            sd_age = sd(Age, na.rm = TRUE)) %>% \n  ungroup()\n\ndemo_by_gender\n```\n\n::: {.callout-tip collapse=\"true\"}\n\n## Tip for decimal places - use `round()`\n\nNot super important, because you could round the values by yourself when writing up your reports, but if you wanted to tidy up the decimal places in the output, you can do that using the `round()` function. You would need to \"wrap\" it around your computations and specify how many decimal places you want to display (for example `mean(Age)` would turn into `round(mean(Age), 1)`). It may look odd for `percentage`, just make sure the number that specifies the decimal places is placed **within** the round function. The default value is 0 (meaning no decimal spaces).\n\n\n```{r}\ndemo_by_gender <- data_prp %>% \n  group_by(Gender) %>% \n  summarise(n = n(), \n            percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places\n            mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place\n            sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places\n  ungroup()\n\ndemo_by_gender\n```\n\n:::\n\n\n\n## Activity 4: Questionable Research Practices (QRPs) {#sec-ch2_act4}\n\n#### The main goal is to compute the mean QRP score per participant for time point 1. {.unnumbered}\n\nAt the moment, the data is in wide format. The table below shows data from the first 3 participants:\n\n```{r}\nhead(data_prp, n = 3)\n```\n<p></p>\n\nLooking at the QRP data at time point 1, you determine that\n\n* individual item columns are `r mcq(c(answer = \"numeric\", x = \"character\"))`, and\n* according to the codebook, there are `r mcq(c(answer = \"no\", x = \"some\"))` reverse-coded items in this questionnaire.\n\nAccording to the codebook and the data table above, we just have to **compute the average score for QRP items `r fitb(\"1\")` to `r fitb(\"11\")`**, since items `r fitb(\"12\")` to `r fitb(\"15\")` are distractor items. Seems quite straightforward.\n\nHowever, as you can see in the table above, each item is in a separate column, meaning the data is in **wide format**. It would be much easier to calculate the mean scores if the items were arranged in **long format**.\n\n\nLet‚Äôs tackle this problem step by step. It‚Äôs best to create a separate data object for this. If we tried to compute it within `data_prp`, it could quickly become messy.\n\n\n* **Step 1**: Select the relevant columns `Code`, and `QRPs_1_Time1` to `QRPs_11_Time1` and store them in an object called `qrp_t1`\n* **Step 2**: Pivot the data from wide format to long format using `pivot_longer()` so we can calculate the average score more easily (in step 3)\n* **Step 3**: Calculate the average QRP score (`QRPs_Acceptance_Time1_mean`) per participant using `group_by()` and `summarise()`\n\n```{r qrps}\nqrp_t1 <- data_prp %>% \n  #Step 1\n  select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%\n  # Step 2\n  pivot_longer(cols = -Code, names_to = \"Items\", values_to = \"Scores\") %>% \n  # Step 3\n  group_by(Code) %>% # grouping by participant id\n  summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score\n  ungroup() # just make it a habit\n```\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Explain the individual functions\n\n::: panel-tabset\n\n## `select ()`\n\nThe select function allows to include or exclude certain variables (columns). Here we want to focus on the participant ID column (i.e., `Code`) and the QRP items at time point 1. We can either list them all individually, i.e., Code, QRPs_1_Time1, QRPs_2_Time1, QRPs_3_Time1, and so forth (you get the gist), but that would take forever to type.\n\nA shortcut is to use the colon operator `:`. It allows us to select all columns that fall within the range of `first_column_name` to `last_column_name`. We can apply this here since the QRP items (1 to 11) are sequentially listed in `data_prp`.\n\n```{r}\nqrp_step1 <- data_prp %>% \n  select(Code, QRPs_1_Time1:QRPs_11_Time1)\n\n# show first 5 rows of qrp_step1\nhead(qrp_step1, n = 5)\n```\n\nHow many rows/observations and columns/variables do we have in `qrp_step1`?\n\n* rows/observations: `r fitb(\"89\")`\n* columns/variables: `r fitb(\"12\")`\n\n## `pivot_longer()`\n\nAs you can see, the table we got from Step 1 is in wide format. To get it into wide format, we need to define:\n\n* the columns that need to be reshuffled from wide into long format (`col` argument). Here we selected \"everything except the `Code` column\", as indicated by `-Code` \\[minus `Code`\\]. However, `QRPs_1_Time1:QRPs_11_Time1` would also work and give you the exact same result.\n* the `names_to` argument. R is creating a new column in which all the column names from the columns you selected in `col` will be stored in. Here we are naming this column \"Items\" but you could pick something equally sensible if you like.\n* the `values_to` argument. R creates this second column to store all responses the participants gave to the individual questions, i.e., all the numbers in this case. We named it \"Scores\" here, but you could have called it something different, like \"Responses\"\n\n```{r}\nqrp_step2 <- qrp_step1 %>% \n  pivot_longer(cols = -Code, names_to = \"Items\", values_to = \"Scores\")\n\n# show first 15 rows of qrp_step2\nhead(qrp_step2, n = 15)\n```\n\nNow, have a look at `qrp_step2`. In total, we now have `r fitb(\"979\")` rows/observations, `r fitb(\"11\")` per participant, and `r fitb(\"3\")` columns/variables.\n\n## `group_by()` and `summarise()`\n\nThis follows exactly the same sequence we used when calculating descriptive statistics by gender. The only difference is that we are now grouping the data by the participant's `Code` instead of `Gender`.\n\n`summarise()` works exactly the same way: `summarise(new_column_name = function_to_calculate_something(column_name_of_numeric_values))`\n\nThe `function_to_calculate_something` can be `mean()`, `sd()` or `sum()` for mean scores, standard deviations, or summed-up scores respectively. You could also use `min()` or `max()` if you wanted to determine the lowest or the highest score for each participant.\n\n:::\n\n:::\n\n::: callout-tip\n\nYou could **rename the columns whilst selecting** them. The pattern would be `select(new_name = old_name)`. For example, if we wanted to select variable `Code` and rename it as `Participant_ID`, we could do that.\n\n```{r}\nrenaming_col <- data_prp %>% \n  select(Participant_ID = Code)\n\nhead(renaming_col, n = 5)\n```\n\n:::\n\n\n\n## Activity 5: Knitting\n\nOnce you've completed your R Markdown file, the final step is to \"knit\" it, which converts the `.Rmd` file into a HTML file. Knitting combines your code, text, and output (like tables and plots) into a single cohesive document. This is a really good way to check your code is working.\n\nTo knit the file, **click the Knit button** at the top of your RStudio window. The document will be generated and, depending on your setting, automatically opened in the viewer in the `Output pane` or an external browser window.\n\nIf any errors occur during knitting, RStudio will show you an error message with details to help you troubleshoot.\n\nIf you want to **intentionally keep any errors** we tackled today to keep a reference on how you solved them, you could add `error=TRUE` or `eval=FALSE` to the code chunk that isn't running.\n\n\n\n## Activity 6: Export a data object as a csv\n\nTo avoid having to repeat the same steps in the next chapter, it's a good idea to save the data objects you've created today as csv files. You can do this by using the `write_csv()` function from the `readr` package. The csv files will appear in your project folder.\n\nThe basic syntax is:\n\n```{r eval=FALSE}\nwrite_csv(data_object, \"filename.csv\")\n```\n\nNow, let's export the objects `data_prp` and `qrp_t1`.\n\n```{r eval=FALSE}\nwrite_csv(data_prp, \"data_prp_for_ch3.csv\")\n```\n\nHere we named the file `data_prp_for_ch3.csv`, so we wouldn't override the original data csv file `prp_data_reduced.csv`. However, feel free to choose a name that makes sense to you.\n\n::: {.callout-note icon=\"false\"}\n\n## Your Turn\n\nExport `qrp_t1`.\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n```{r eval=FALSE}\nwrite_csv(qrp_t1, \"qrp_t1.csv\")\n```\n\n:::\n\n:::\n\nCheck that your csv files have appeared in your project folder, and you're all set!\n\n**That‚Äôs it for Chapter 2: Individual Walkthrough.**\n\n\n\n## [Test your knowledge and challenge yourself]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n### Knowledge check {.unnumbered}\n\n#### Question 1 {.unnumbered}\n\nWhich function of the Wickham Six would you use to include or exclude certain variables (columns)? `r mcq(c(answer = \"select()\", x = \"filter()\", x = \"mutate()\", x = \"arrange()\", x = \"group_by()\", x = \"summarise()\"))`\n\n\n#### Question 2 {.unnumbered}\n\nWhich function of the Wickham Six would you use to create new columns or modify existing columns in a dataframe? `r mcq(c(x = \"select()\", x = \"filter()\", answer = \"mutate()\", x = \"arrange()\", x = \"group_by()\", x = \"summarise()\"))`\n\n\n#### Question 3 {.unnumbered}\n\n\nWhich function of the Wickham Six would you use to organise data into groups based on one or more columns? `r mcq(c(x = \"select()\", x = \"filter()\", x = \"mutate()\", x = \"arrange()\", answer = \"group_by()\", x = \"summarise()\"))`\n\n\n\n#### Question 4 {.unnumbered}\n\nWhich function of the Wickham Six would you use to sort the rows of a dataframe based on the values in one or more columns? `r mcq(c(x = \"select()\", x = \"filter()\", x = \"mutate()\", answer = \"arrange()\", x = \"group_by()\", x = \"summarise()\"))`\n\n\n\n#### Question 5 {.unnumbered}\n\nWhich function of the Wickham Six would NOT modify the original dataframe? `r mcq(c(x = \"select()\", x = \"filter()\", x = \"mutate()\", x = \"arrange()\", x = \"group_by()\", answer = \"summarise()\"))`\n\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain these answers\n\n| Function     | Description                                           |\n|:-------------|:------------------------------------------------------|\n| `select()`   | Include or exclude certain variables/columns          |\n| `filter()`   | Include or exclude certain observations/rows          |\n| `mutate()`   | Creates new columns or modifies existing ones         |\n| `arrange()`  | Changes the order of the rows                         |\n| `group_by()` | Split data into groups based on one or more variables |\n| `summarise()`| Creates a new dataframe returning one row for each combination of grouping variables |\n\n\nTechnically, the first five functions operate on the existing data object, making adjustments like sorting the data (e.g., with `arrange()`), reducing the number of rows (e.g., with `filter()`), reducing the number of columns (e.g., with `select()`), or adding new columns (e.g., with `mutate()`). In contrast, `summarise()` fundamentally alters the structure of the original dataframe by generating a completely new dataframe that contains only summary statistics, rather than retaining the original rows and columns.\n\n:::\n\n\n\n### Error mode {.unnumbered}\n\nSome of the code chunks contain mistakes and result in errors, while others do not produce the expected results. Your task is to identify any issues, explain why they occurred, and, if possible, fix them.\n\nWe will use a few built-in datasets, such as `billboard` and `starwars`, to help you replicate the errors in your own R environment. You can view the data either by typing the dataset name directly into your console or by storing the data as a separate object in your `Global Environment`.\n\n\n```{r eval=FALSE}\nbillboard\n\nstarwars_data = starwars\n```\n\n\n\n#### Question 6 {.unnumbered}\n\nCurrently, the weekly song rankings for Billboard Top 100 in 2000 are in wide format, with each week in a separate column. The following code is supposed to transpose the wide-format `billboard` data into long format:\n\n```{r error=TRUE}\nlong_data <- billboard %>% \n  pivot_longer(names_to = \"weeks\", values_to = \"rank\")\n```\n\nWhat does this error message mean and how do you fix it?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nThe error message indicates that the `cols` argument is missing in the function. This means the function doesn‚Äôt know which columns to transpose from wide format to long format.\n\nFIX: Add `cols = wk1:wk76` to the function to select columns from wk1 to wk76. Alternatively, `cols = starts_with(\"wk\")` would also work since all columns start with the letter combination \"wk\".\n\n```{r}\nlong_data <- billboard %>% \n  pivot_longer(cols = wk1:wk76, names_to = \"weeks\", values_to = \"rank\")\n# OR\nlong_data <- billboard %>% \n  pivot_longer(cols = starts_with(\"wk\"), names_to = \"weeks\", values_to = \"rank\")\n```\n\n:::\n\n\n\n#### Question 7 {.unnumbered}\n\nThe following code is intended to calculate the mean height of all the characters in the built-in `starwars` dataset, grouped by their gender. \n\n```{r error=TRUE, message=FALSE}\nsummary_data <- starwars %>%\n  group_by(gender) %>%\n  summarise(mean_height = height)\n```\n\nThe code runs, but it's giving us some weird warning and the output is also not as expected. What steps should we take to fix this?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nThe aggregation function `mean()` is missing from within `summarise()`. Without it, the function does not perform any aggregation and returns *all* rows with only the columns for gender and height.\n\nFIX: Wrap the `mean()` function around the variable you want to aggregate, here `height`.\n\n```{r}\nsummary_data <- starwars %>%\n  group_by(gender) %>%\n  summarise(mean_height = mean(height))\n```\n\n:::\n\n\n\n#### Question 8 {.unnumbered}\n\nFollowing up on Question 7, we now have `summary_data` that looks approximately correct - it has the expected rows and column numbers, however, the cell values are \"weird\".\n\n```{r}\nsummary_data\n```\n\n\nCan you explain what is happening here? And how can we modify the code to fix this?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nLook at the original `starwars` data. You will notice that some of the characters with feminine and masculine gender entries have missing height values. However, all four characters without a specified gender have provided their height.\n\nFIX: We need to add `na.rm = TRUE` to the `mean()` function to ensure that R ignores missing values before aggregating the data.\n\n```{r}\nsummary_data <- starwars %>%\n  group_by(gender) %>%\n  summarise(mean_height = mean(height, na.rm = TRUE))\n\nsummary_data\n```\n\n:::\n\n\n\n### Challenge yourself {.unnumbered}\n\nIf you want to **challenge yourself** and further apply the skills from Chapter 2, you can wrangle the data from `dog_data_raw` for additional questionnaires from either the pre- and/or post-intervention stages:\n\n* Calculate the mean score for `flourishing_post` for each participant.\n* Calculate the mean score for the `PANAS` (Positive and/or Negative Affect) per participant\n* Calculate the mean score for happiness (`SHS`) per participant\n\nThe 3 steps are equivalent for those questionnaires - select, pivot, group_by and summarise; you just have to \"replace\" the questionnaire items involved.\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution for **Challenge yourself**\n\nFlourishing post-intervention\n\n```{r eval=FALSE}\n## flourishing_post\nflourishing_post <- dog_data_raw %>% \n  # Step 1\n  select(RID, starts_with(\"F2\")) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Names\", values_to = \"Response\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(Flourishing_post = mean(Response)) %>% \n  ungroup()\n```\n\nThe PANAS could be solved more concisely with the skills we learn in @sec-wrangling2, but for now, you would have solved it this way:\n\n```{r eval=FALSE}\n# PANAS - positive affect pre\nPANAS_PA_pre <- dog_data_raw %>% \n  # Step 1\n  select(RID, PN1_3, PN1_5, PN1_7, PN1_8, PN1_10) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Items\", values_to = \"Scores\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(PANAS_PA_pre = mean(Scores)) %>% \n  ungroup()\n\n# PANAS - positive affect post\nPANAS_PA_post <- dog_data_raw %>% \n  # Step 1\n  select(RID, PN2_3, PN2_5, PN2_7, PN2_8, PN2_10) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Items\", values_to = \"Scores\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(PANAS_PA_post = mean(Scores)) %>% \n  ungroup()\n\n# PANAS - negative affect pre\nPANAS_NA_pre <- dog_data_raw %>% \n  # Step 1\n  select(RID, PN1_1, PN1_2, PN1_4, PN1_6, PN1_9) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Items\", values_to = \"Scores\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(PANAS_NA_pre = mean(Scores)) %>% \n  ungroup()\n\n# PANAS - negative affect post\nPANAS_NA_post <- dog_data_raw %>% \n  # Step 1\n  select(RID, PN2_1, PN2_2, PN2_4, PN2_6, PN2_9) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Items\", values_to = \"Scores\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(PANAS_NA_post = mean(Scores)) %>% \n  ungroup()\n\n```\n\nHappiness scale\n\n```{r eval=FALSE}\n# happiness_pre\nhappiness_pre <- dog_data_raw %>% \n  # Step 1\n  select(RID, HA1_1, HA1_2, HA1_3) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Item\", values_to = \"Score\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(SHS_pre = mean(Score)) %>% \n  ungroup()\n\n#happiness_post\nhappiness_post <- dog_data_raw %>% \n  # Step 1\n  select(RID, HA2_1, HA2_2, HA2_3) %>% \n  # Step 2\n  pivot_longer(cols = -RID, names_to = \"Item\", values_to = \"Score\") %>% \n  # Step 3\n  group_by(RID) %>% \n  summarise(SHS_post = mean(Score)) %>% \n  ungroup()\n```\n\n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["https://use.fontawesome.com/releases/v5.13.0/css/all.css","include/booktem.css","include/webex.css","include/glossary.css","include/style.css","include/custom.scss"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"02-wrangling.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","lightbox":true,"bibliography":["include/references.bib"],"csl":"include/apa.csl","theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover","mainfont":"","monofont":""},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}