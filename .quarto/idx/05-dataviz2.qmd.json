{"title":"Data viz II","markdown":{"headingText":"Data viz II","headingAttr":{"id":"sec-dataviz2","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r include=FALSE}\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(wesanderson)\nlibrary(webexercises)\n\n# Layers\n# https://intro2r.com/the-start-of-the-end.html\n```\n\n## Intended Learning Outcomes {.unnumbered}\n\nBy the end of this chapter you should be able to:\n\n-   choose an appropriate plot for continuous variables \n-   choose an appropriate plot for a mix of continuous/categorical variables \n-   create a basic version of an appropriate plot\n-   apply extra layers to change the appearance of the plot\n\nIn this chapter, we continue our journey of appropriate plots. Last week, we examined which **plots are appropriate for categorical variables**. Today, we'll focus on continuous variables and which plots to choose with a **mix of continuous and categorical variables**.\n\n\n\n## [Individual Walkthrough]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n\n## Activity 1: Set-up and data for today\n\n* We are still working with the data by Pownall et al. (2023). **Open the project**.\n* You could use the same `.Rmd` file as last week if you want to keep all plotting in one document or create a new `.Rmd` to separate plots for categorical and continuous variables. Up to you.\n* The aggregated data is the same as last week. It should be in your project folder but in case it got lost, download the csv again and place it in your project folder: [data_prp_for_ch4.csv](data/data_prp_for_ch4.csv \"download\").\n* If you need a reminder about the data and variables, have a look at the codebook and/or @sec-download_data_ch1.\n\n\n\n## Activity 2: Load in libraries, read in data, and adjust data types\n\nToday, we need to load the package `tidyverse`, and read in the data `data_prp_ch4.csv`.\n\n```{r eval=FALSE}\n## packages \n???\n\n## data\ndata_prp_viz <- ???\n```\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n```{r eval=FALSE}\nlibrary(tidyverse)\ndata_prp_viz <- read_csv(\"data_prp_for_ch4.csv\")\n```\n\n:::\n\n\n\n```{r include=FALSE}\n## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path\n\nlibrary(tidyverse)\ndata_prp_viz <- read_csv(\"data/data_prp_for_ch4.csv\")\n```\n\n\nThis is the same code as last week. We need to turn our categorical variables into factors to make plotting easier.\n\n```{r}\ndata_prp_viz <- data_prp_viz %>% \n  mutate(Gender = factor(Gender,\n                         levels = c(2, 1, 3),\n                         labels = c(\"females\", \"males\", \"non-binary\")),\n         Secondyeargrade = factor(Secondyeargrade,\n                                  levels = c(1, 2, 3, 4, 5),\n                                  labels = c(\"≥ 70% (1st class grade)\", \"60-69% (2:1 grade)\", \"50-59% (2:2 grade)\", \"40-49% (3rd class)\", \"< 40%\")),\n         Plan_prereg = factor(Plan_prereg,\n                              levels = c(1, 3, 2),\n                              labels = c(\"Yes\", \"Unsure\", \"No\")),\n         Closely_follow = factor(Closely_follow,\n                                 levels = c(2, 3),\n                                 labels = c(\"Followed it somewhat\", \"Followed it exactly\")),\n         Research_exp = factor(Research_exp),\n         Pre_reg_group = factor(Pre_reg_group))\n\n```\n\n\n::: {.callout-tip}\n\nIf you are working within the same `.Rmd` file as last week, you can skip these initial steps but you have to run the code you had already placed at the start of last-week's `.Rmd` file to load tidyverse into the library, read in the data, and convert some of the variables into factors.\n\n:::\n\n\n## Activity 3: Histogram (`geom_histogram()`) {#sec-hist}\n\nIf you want to show the **distribution of a continuous variable**, you can use a histogram. As with every plot, you need at least 3 layers to create a base version of the plot. Similar to `geom_bar()`, `geom_histogram()` only requires an `x` variable as it does the counting \"in the background\".\n\nA histogram divides the data into \"bins\" (i.e., groupings displayed in a single bar). These bins are plotted along the x-axis, with the y-axis showing the count of observations in each bin. It's basically a barchart for continuous variables.\n\nLet's have a look at the age distribution in our dataset.\n\n```{r fig-hist, fig.cap=\"Default histogram\"}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram() \n```\n\n\nThe default **number of bins** is 30 (as shown in @fig-hist above). Changing the number of bins (argument `bins`) allows for more or less fine-tuning of the data. A higher number of bins results in more detailed granularity.\n\nPerhaps it’s more intuitive to modify the **width of each bin** using the `binwidth` argument. For example, `binwidth = 1` for the age category would mean each \"age group\" represents 1 year, while `binwidth = 5` would group ages into 5-year spans. The plots below show modifications for both `bins` and `binwidth`.\n\n\n```{r eval = FALSE, message = FALSE}\n#less finetuning\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(bins = 10) \n\n# more fineturning\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1) \n```\n\n```{r fig-bins, fig.cap=\"Bins vs binwidth arguments\", echo=FALSE}\nbins_manipulation <- \n  ggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(bins = 10)\n\n\nbinwidth_manipulation <-\n  ggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1) \n\n# add plots together in 1 row\nbins_manipulation + binwidth_manipulation + plot_layout(nrow = 1)\n```\n\nThe **warning message** tells us 2 row of data were removed due to containing `non-finite values outside the scale range`. Have a look at the age column in `data_prp_viz` to see if you can decipher the warning message.\n\nThe rows were removed because `r mcq(c(x = \"they fall outside of the plot range\", answer = \"they contain missing values\"))`.\n\nColours are manipulated slightly differently than in the barchart. Click through each tab to see how you can modify colours, axis labels, margins, and breaks, and apply a different theme.\n\n\n::: {.panel-tabset}\n\n## Colour\n\nWe can change the plot colours by adding a **fill argument** and a **colour argument**. The `fill` argument changes the colour of the bars, while the `colour` argument modifies the outline of the bars. Note that these arguments are **added directly to the `geom_histogram()`**, rather than within the overall `aes()`, as we did with the barchart.\n\n\n```{r warning=FALSE}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")\n```\n\n::: callout-tip\n\nYou could use:\n\n* Hex codes for `fill` and `colour`, as we did here: `geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")`. If you want to create your own colours, check out [this website](https://www.hexcolortool.com/){target=\"_blank\"}.\n\n* Pre-defined colour names: `geom_histogram(binwidth = 1, fill = \"purple\", colour = \"green\")`. See the full list [here](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/){target=\"_blank\"}.\n\n:::\n\n\n## Axes labels, margins, and breaks\n\nHere we **removed the label** for the y axes `Count` (to show you some variety) and **modified the breaks**. The y-axis is now displayed in increasing steps of 5 (rather than 10), and the x-axis has 1-year increments instead of 5. \n\nNotice how the `breaks =` argument changes the labels of the break ticks but not the scale limits. You can adjust the limits of the scale using the `limits =` argument. To exaggerate, we set the limits to 15 and 50. See how the values from 15 to 19, and 44 to 50 do not have labels? You would need to adjust that using the `breaks =` argument.\n\n\nThe `expansion()` function removes the gap between the x-axis and the bars. It is exactly the same code we used in @sec-dataviz.\n\n\n```{r warning=FALSE}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\", # renaming x axis label\n       y = \"\") + # removing the y axis label\n  scale_y_continuous(\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05)),\n    # changing break points on y axis\n    breaks = seq(from = 0, to = 30, by = 5)\n    ) +\n  scale_x_continuous(\n    # changing break points on x axis\n    breaks = seq(from = 20, to = 43, by = 1),\n    # Experimenting with\n    limits = c(15, 50)\n    )\n  \n```\n\n## Themes\n\nLet's experiment with the themes. For this plot we have chosen `theme_bw()`\n\n```{r warning=FALSE}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\", # renaming x axis label\n       y = \"\") + # removing the y axis label\n  scale_y_continuous(\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05)),\n    # changing break points on y axis\n    breaks = seq(from = 0, to = 30, by = 5)\n    ) +\n  scale_x_continuous(\n    # changing break points on x axis\n    breaks = seq(from = 19, to = 44, by = 1)\n    ) +\n  # pick a theme\n  theme_bw()\n  \n```\n:::\n\n\n## Activity 4: Scatterplot (`geom_point()`) {#sec-scatter}\n\nScatterplots are appropriate when you want to plot **two continuous variables**. Here, we want to display the relationship between Acceptance of QRPs at Time point 1 and Time point 2. The default scatterplot can be created with `geom_point()`.\n\nWe can also **add a trendline** by using `geom_smooth()`. The default trendline is `loess`. If you want a linear trendline, you would need to add `method = \"lm\"` inside the `geom_smooth()` function.\n\n\n\n```{r eval=FALSE}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n\n\n```{r fig-scatter, echo=FALSE, message=FALSE, fig.cap=\"Default Scatterplot with added trendline - loess (left) and linear (right)\"}\nScat_1 <- ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth()\n\nscat_2 <- ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nScat_1 + scat_2 + plot_layout(nrow = 1)\n```\n\n\n\nCustomising the colour of a scatterplot is slightly different from the other plots we’ve encountered so far. Technically, the point is not a \"filled-in black area\" but rather an extremely wide outline of a circle. Therefore, we cannot use the usual `fill` argument and instead need to use the `colour` argument, similar to how we customised the outline of the histogram. \n\nSee the tabs below to learn how to change the colour for all points or how to adjust the colour based on groupings.\n\n\n::: {.panel-tabset}\n\n\n## Colour for all points\n\nIf we want to **change the colour of all the points**, we can add the `colour` argument to the `geom_point()` function. Likewise, to change the **colour of the trendline**, we would also use the `colour` argument. Here, we used pre-defined colour names, but HEX codes would work just as well.\n\n\n\n```{r message=FALSE}\n# colour of all points and the trendline\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point(colour = 'magenta') +\n  geom_smooth(method = lm, colour = 'turquoise')\n```\n\n\n\n## Colour with grouping\n\nIf we want the points to **change colour based on another grouping variable**, the `colour` argument should go inside the `aes()`. If you don’t want to define the colours manually, you can use a colour palette like Brewer (`scale_colour_brewer()`) or Viridis (`scale_colour_viridis_d()`).\n\n```{r message=FALSE}\n## adding grouping variable Pre_reg_group and changing the colour values manually\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'))\n```\n\n\n\n## Legend title and labels\n\nYou can tidy the legend title and group labels using the `scale_colour_?` function, depending on the palette you’re using (e.g., `scale_colour_manual()`, `scale_colour_brewer` and many more).\n\n\n```{r message=FALSE}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),\n                      name = \"Pre-registered Dissertation\",\n                      labels = c(\"Yes\", \"No\"))\n```\n\n:::\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\nAll other layers remain exactly the same as in other plots. Try adding layers to make the plot above prettier:\n\n* [ ] 1. relabel axes x and y\n* [ ] 2. set the x and y axis range from 1 to 7\n* [ ] 3. move the legend to a different position (either top, left, or bottom)\n* [ ] 4. add a theme\n\n\n::: {.callout-note collapse=\"true\" icon=\"false\"} \n\n## Hints\n\n1. can be done in 2 different ways - labs() or scale_x_?\n2. we did that for the histogram\n3. We did that for the barcharts\n4. pick a theme you like\n\n\n::: {.callout-note collapse=\"true\" icon=\"false\"} \n\n## More hints\n\nIf you are experiencing issues with the legend position and theme, try modifying the order of the layers.\n\n:::\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution\n\n```{r message=FALSE}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),\n                      name = \"Pre-registered Dissertation\",\n                      labels = c(\"Yes\", \"No\")) +\n  labs (x = \"Acceptance of Questionable Research Practices (Time 1)\", \n        y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_light() + # place before moving the legend position\n  theme(legend.position = \"top\") # move legend to the top\n  \n\n```\n\n\n:::\n\n:::\n\n\n\n\n\n\n## Activity 5: Boxplot (`geom_boxplot()`)\n\nA boxplot is one of the options to display a **continuous variable with categorical grouping variable**. Here, we want to create a boxplot to explore whether students' understanding of open science varies based on whether or not they have research experience. Our default boxplot would look like this:\n\n\n```{r}\n# default boxplot\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS)) +\n  geom_boxplot()\n```\n\n\nTada! As usual, we can enhance the plot by adding various layers. Click on each tab below to see how.\n\n\n::: {.panel-tabset}\n\n## Colour\n\nWe can change the colour by adding a `fill` argument inside the `aes()`. To customise the colours further, we can add a `scale_fill_?` layer. If you have specific colours in mind, use `scale_fill_manual()`. If you prefer pre-defined palettes, such as Brewer, you can use `scale_fill_brewer()`.\n\nBtw, this is exactly the same code we used for the barcharts.\n\n```{r}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  # customise colour\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n## Axes labels\n\nWe need to relabel the axes. The function to use depends on the variable type. Here, we need `scale_x_discrete()` for the x-axis and `scale_y_continuous()` for the y-axis. We can also tidy up the group labels and adjust the breaks on the y-axis (e.g., in steps of 1 instead of 2) within these same functions.\n\n\n```{r}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_x_discrete(\n    # changing the label of x\n    name = \"Research Experience\",\n    # changing the group labels of the 2 groups\n    labels = c(\"Yes\", \"No\")) + \n  scale_y_continuous(\n    # changing name of the y axis\n    name = \"Confidence in Understanding Open Science (Time 1)\",\n    # changing break labels\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  )\n  \n```\n\n## Legend and Theme\n\nThe legend is superfluous; best to take it off. As before, we can remove the legend by adding the argument `guide = \"none\"` to the `scale_fill_?` function.\n\nLet's pick a theme we haven't used yet: `theme_dark()`.\n\n\n```{r}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\",\n                    # removing the legend\n                    guide = \"none\") +\n  scale_x_discrete(\n    name = \"Research Experience\",\n    labels = c(\"Yes\", \"No\")) + \n  scale_y_continuous(\n    name = \"Confidence in Understanding Open Science (Time 1)\",\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  ) +\n  # pick a theme\n  theme_dark()\n  \n```\n\n:::\n\n\n\n\n## Activity 6: Violin plot (`geom_violin()`)\n\nAn alternative way to display a **continuous variable with a categorical grouping variable** is a violin plot. Here, we want to create a violin plot to explore whether the perception of supervisor support depends on whether students plan to pre-register their dissertation. Our default violin plot would look like this:\n\n```{r}\n# default boxplot\nggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support)) +\n  geom_violin()\n```\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\nAdjusting the violin plot would be exactly the same as the boxplot. Try to add layers to the base plot above to\n\n* [ ] change the colours either manually or using a pre-defined colour palette \n* [ ] tidy the axes labels and group names\n* [ ] in case a legend appears, take it off\n* [ ] add a theme\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## One possible Solution\n\n```{r}\nggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support, fill = Plan_prereg)) +\n  geom_violin() +\n  scale_fill_manual(values = c('mediumspringgreen', 'orangered', 'slateblue'),\n                    # removing the legend\n                    guide = \"none\") +\n  scale_x_discrete(name = \"Plan to pre-register the dissertation\") + \n  scale_y_continuous(\n    name = \"Perceived Supervisory Support\",\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  ) +\n  # pick a theme\n  theme_minimal()\n```\n:::\n\n:::\n\n\n## Activity 7: Violin-boxplots\n\nSo far, we’ve only added one `geom_?` layer to our plots. However, thanks to ggplot's layered system, we can add multiple geoms, for example, when creating a violin-boxplot.\n\nRemember, the order of the layers can sometimes make a difference. We've seen this already - adding a theme at the end can override earlier arguments like the legend position. Similarly, `ggplot + violinplot + boxplot` will look different from `ggplot + boxplot + violinplot`.\n\nLet's use the example of QRPs at timepoint 2 and a grouping variable of Second-year Grade.\n\n\n```{r eval=FALSE}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_violin() +\n  geom_boxplot()\n\n\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_boxplot() +\n  geom_violin()\n```\n\n\n```{r, fig-vb_bv, echo=FALSE, fig.cap=\"Default violin-boxplot: Order of the layer matters\"}\nvb <- ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_violin() +\n  geom_boxplot()\n\n\nbv <- ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_boxplot() +\n  geom_violin()\n\nvb + bv + plot_layout(nrow = 1)\n\n```\n\n\nSee the tabs below to learn how to customise various elements, such as the width of the boxes, and the colour or opacity.\n\n\n::: {.panel-tabset}\n\n## Width of the boxes\n\nIf we want to get any information from the boxplot, we need to place it \"on top of\" the violin plot. But still, the boxplot is pretty wide and covers important details from the violin plot. To make the information more visible, we can **adjust the width of the boxes**. Finding an appropriate width might take some trial and error.\n\n\n```{r, fig-vb_width, fig.cap=\"Default violin-boxplot: adjusting width of the box\"}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2)\n```\n\n## Colour\n\nAdding colour should be pretty straightforward by now. The code is no different from what we used for the boxplot or violin plot. We need to add the `fill` argument within the `aes()`, along with a `scale_fill_?` layer.\n\nHowever, we can further customise the plot by adding an **opacity argument** using `alpha` to the violin plot geom.\n\n\n```{r fig-vb_colour, fig.cap=\"Violin-boxplot with a different colour palette\"}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.4) + # alpha for opacity\n  geom_boxplot(width = 0.2) + # change width of the boxes\n  scale_fill_brewer(palette = \"RdPu\") # customise colour\n```\n\n:::\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\n* [ ] Change the x- and y-axis labels\n* [ ] Remove the legend\n* [ ] add a theme\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## One possible Solution \n\n```{r}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.4) +\n  geom_boxplot(width = 0.2) +\n  scale_fill_brewer(palette = \"RdPu\",\n                    guide = \"none\") + # removes the legend\n  # change labels of x and y\n  labs (x = \"Second-year Grade\", y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_classic()\n  \n```\n:::\n\n:::\n\n\n## Activity 8: Faceting - adding another grouping variable\n\nFaceting is really useful when you have subsets in the data. We will apply it to the violin-boxplot from above, but you could add this layer to pretty much any plot. The function to split the plots into facets is called `facet_wrap()`.\n\nLet's **add another grouping variable**, `Pre_reg_group`, to create separate plots for the yes and no groups.\n\nSince the group labels on the x-axis are quite long, we will need to adjust them for better readability. Adding `guide = guide_axis(n.dodge = 2)` to the `scale_x_discrete()` function helps to display labels across multiple rows.\n\n\n\n```{r fig-vb_pretty_facet, fig.cap=\"Pretty violin-boxplot split into pre-registration groups (yes and no)\"}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.2) +\n  scale_fill_brewer(palette = \"RdPu\",\n                    guide = \"none\") + \n  labs (x = \"Second-year Grade\", y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_classic() +\n  facet_wrap(~Pre_reg_group) + # faceting to split into subplots for yes and no\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) # want display labels in 2 rows\n\n```\n\n::: {.callout-tip}\n\nYou may have noticed that the labels of `Pre_reg_group` are displayed as numbers (1 and 2). If this bugs you, fix the labels in the data object. This would be less hassle than trying to adjust the facet headings in the plot.\n\n:::\n\n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n\n## Special case: Variables with subscales\n\nFor example, if we want to show the relationship between SATs scores at Timepoints 1 and 2, separately for all four subscales of the SATs questionnaire, we need to wrangle the data so that the scores for Time 1 and Time 2 are in separate columns, but each participant has four rows (one for each subscale). The dataframe should look like this:\n\n\n\n```{r include=FALSE}\ndata_facet <- data_prp_viz %>% \n  select(Code, starts_with(\"SATS\")) %>% \n  pivot_longer(cols = starts_with(\"SATS\"), names_to = \"Variable\", values_to = \"Mean_Scores\") %>% \n  separate(Variable, into = c(NA, \"Subscale\", \"Timepoint\", NA), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Mean_Scores)\n```\n\n```{r}\nhead(data_facet, n=5)\n```\n\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\nCreate a new data object `data_facet` and wrangle the data from `data_prp_viz` so that it looks like the table above.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n\n## Broad hints\n\n* **Step 1**: select variables of interest from `data_prp_viz`\n* **Step 2**: pivot the data\n* **Step 3**: try to access information on subscales and timepoints from the variable names\n* **Step 4**: pivot in the other direction\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n\n## More specific hints\n\n* **Step 1**: The variables of interest are the participants' ID and all columns that start with SATS.\n* **Step 2**: Pivot all columns, except the participant ID, from wide to long format.\n* **Step 3**: Get some inspiration from Activity 4 in {#sec-wrangling2}.\n* **Step 4**: At this point, subscales and timepoints should be in long format. However, only the subscale information should remain in long format. Pivot the data from long to wide format so that Time 1 and Time 2 are in separate columns.\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n```{r}\ndata_facet <- data_prp_viz %>% \n  select(Code, starts_with(\"SATS\")) %>% \n  pivot_longer(cols = starts_with(\"SATS\"), names_to = \"Variable\", values_to = \"Mean_Scores\") %>% \n  separate(Variable, into = c(NA, \"Subscale\", \"Timepoint\", NA), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Mean_Scores)\n```\n\n:::\n\n:::\n\nNow we can build a scatterplot with facets for the subscales.\n\n```{r}\nggplot(data_facet, aes(x = Time1, y = Time2)) +\n  geom_point() +\n  facet_wrap(~Subscale)\n```\n\n:::\n\n\n\n\n## [Pair-coding]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n### Task 1: Open the R project for the lab {.unnumbered}\n\n### Task 2: Create a new `.Rmd` file {.unnumbered}\n\n... and name it something useful. If you need help, have a look at @sec-rmd.\n\n### Task 3: Load in the library and read in the data {.unnumbered}\n\nThe data should already be in your project folder. If you want a fresh copy, you can download the data again here: [data_pair_coding](data/data_pair_coding.zip \"download\").\n\nWe are using the package `tidyverse` today, and the data file we need to read in is `dog_data_clean_wide.csv`. I've named my data object `dog_data_wide` to shorten the name but feel free to use whatever object name sounds intuitive to you.\n\n```{r reading in data for me, echo=FALSE, message=FALSE}\nlibrary(tidyverse)\n\ndog_data_wide <- read_csv(\"data/dog_data_clean_wide.csv\")\ndog_data_long <- read_csv(\"data/dog_data_clean_long.csv\")\n```\n\n\n### Task 4: Re-create one of the 3 plots below {.unnumbered}\n\nRe-create one of the 3 plot below:\n\n* grouped barchart (easy)\n* violin-boxplot (medium)\n* scatterplot (hard)\n\n#### Difficulty level: easy {.unnumbered}\n\n```{r echo=FALSE}\ndata_bar <- dog_data_wide %>% \n  select(RID, GroupAssignment, Year_of_Study) %>% \n  mutate(GroupAssignment = factor(GroupAssignment,\n                                  levels = c(\"Direct\", \"Indirect\", \"Control\")),\n         Year_of_Study = factor(Year_of_Study,\n                                levels = c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth or above\")))\n\nggplot(data_bar, aes(x = GroupAssignment, fill = Year_of_Study)) +\n  geom_bar(position = \"dodge\") +\n  labs(x = \"Experimental Group\", y = \"Count\", fill = \"Year of Study\")\n```\n\n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## Hints \n\n* I've created a new data object `data_bar` to select the relevant variables but you could also work straight from `dog_data_wide`.\n* Consider turning the 2 categorical variables into factors before plotting\n* Plotting should be relatively straightforward - these are default colours and you would only need to change the axes labels/ legend title. \n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n## More hints \n\nWe can change all of the 3 labels in one go. Check out the *## Prettier grouped barchart* in @sec-adv_bar, where we did exactly that.\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for `data_bar`\n\n```{r eval=FALSE}\ndata_bar <- dog_data_wide %>% \n  select(RID, GroupAssignment, Year_of_Study) %>% \n  mutate(GroupAssignment = factor(GroupAssignment,\n                                  levels = c(\"Direct\", \"Indirect\", \"Control\")),\n         Year_of_Study = factor(Year_of_Study,\n                                levels = c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth or above\")))\n```\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for the barchart\n\n```{r eval=FALSE}\nggplot(data_bar, aes(x = GroupAssignment, fill = Year_of_Study)) +\n  geom_bar(position = \"dodge\") +\n  labs(x = \"Experimental Group\", y = \"Count\", fill = \"Year of Study\")\n```\n:::\n\n\n:::\n\n#### Difficulty level: medium {.unnumbered}\n\n```{r echo=FALSE}\ndata_vb <- dog_data_wide %>% \n  select(RID, Year_of_Study, Loneliness_post) %>% \n  mutate(Year_of_Study = factor(Year_of_Study,\n                                levels = c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth or above\")))\n\nggplot(data_vb, aes(x = Year_of_Study, y = Loneliness_post, fill = Year_of_Study)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.25) +\n  scale_y_continuous(breaks = c(seq(from = 1, to = 4, by = 0.5)),\n                     limits = c(1, 4)) +\n  scale_fill_viridis_d(option = \"magma\",\n                       guide = \"none\") +\n  labs(x = \"Year of Study\", y = \"Loneliness scores post intervention\") +\n  theme_classic()\n```\n\n::: {.callout-warning collapse=\"true\" icon=\"false\"}\n## Hints \n\n* I've created a new data object `data_vb` to select the relevant variables but you could also work straight from `dog_data_wide`.\n* Consider turning the categorical variable into a factor before plotting\n* Plotting tips:\n  * the colour scale is one of the viridis options \n  * it's a bit of trial and error for the opacity of the violin and the box width of the boxes (it is totally fine if it looks approximately right)\n  * the tricky part might be adjusting the y-axis ticks. Take inspiration from the histogram in @sec-hist (Tab *Axes labels, margins, and breaks*)\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for `data_vb`\n\n```{r eval=FALSE}\ndata_vb <- dog_data_wide %>% \n  select(RID, Year_of_Study, Loneliness_post) %>% \n  mutate(Year_of_Study = factor(Year_of_Study,\n                                levels = c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth or above\")))\n```\n\n::: \n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for the violin-boxplot\n\n```{r eval=FALSE}\nggplot(data_vb, aes(x = Year_of_Study, y = Loneliness_post, fill = Year_of_Study)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.25) +\n  scale_y_continuous(breaks = c(seq(from = 1, to = 4, by = 0.5)),\n                     limits = c(1, 4)) +\n  scale_fill_viridis_d(option = \"magma\",\n                       guide = \"none\") +\n  labs(x = \"Year of Study\", y = \"Loneliness scores post intervention\") +\n  theme_classic()\n```\n\n::: \n\n:::\n\n#### Difficulty level: hard {.unnumbered}\n\n```{r echo=FALSE, warning=FALSE, message=FALSE}\ndata_scatter <- dog_data_wide %>% \n  select(RID, starts_with(\"PANAS\")) %>% \n  pivot_longer(cols = -RID, names_to = \"Q\", values_to = \"Values\") %>% \n  separate(Q, into = c(NA, \"Subscale\", \"Timepoint\"), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Values) %>% \n  mutate(Subscale = case_match(Subscale,\n                               \"NA\" ~ \"Negative Affect\",\n                               \"PA\" ~ \"Positive Affect\"),\n         Subscale = factor(Subscale)) %>% \n  drop_na()\n\n\nggplot(data_scatter, aes(x = pre, y = post, colour = Subscale)) +\n  geom_point() +\n  geom_smooth(method = lm, colour = \"#7570b3\") +\n  facet_wrap(~Subscale) +\n  labs(x = \"Pre-Intervention (Timepoint 1)\",\n       y = \"Post-Intervention (Timepoint 2)\") +\n  scale_colour_brewer(palette = \"Dark2\",\n                      guide = \"none\") +\n  theme_bw()\n\n```\n\n\n::: {.callout-important collapse=\"true\" icon=\"false\"}\n## Hints \n\n* **Data wrangling**: Even though we cleaned the data, it may not be in the shape for the task at hand. Have a look what the data object `dog_data_wide` looks like and think about how you'd need to restructure it to be able to plot the scatterplot. As always, I would suggest creating a new data object for the scatterplot (e.g., `data_scatter`).\n* Once you have the data in the right shape, start **plotting**. Start with a basic scatterplot and then add various layers and change elements you notice. \n* Remember, some finetuning might need to be done in `data_scatter` rather than plot itself.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Data structure you have\n\n```{r echo=FALSE}\ndata_scatter <- dog_data_wide %>% \n  select(RID, starts_with(\"PANAS\"))\n\nhead(data_scatter, n = 5)\n```\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Data structure you need\n\n```{r echo=FALSE}\ndata_scatter <- dog_data_wide %>% \n  select(RID, starts_with(\"PANAS\")) %>% \n  pivot_longer(cols = -RID, names_to = \"Q\", values_to = \"Values\") %>% \n  separate(Q, into = c(NA, \"Subscale\", \"Timepoint\"), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Values) %>% \n  mutate(Subscale = case_match(Subscale,\n                               \"NA\" ~ \"Negative Affect\",\n                               \"PA\" ~ \"Positive Affect\"),\n         Subscale = factor(Subscale)) %>% \n  drop_na()\n\nhead(data_scatter, n = 5)\n```\n\n:::\n\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Hints for `data_scatter`\n\n* **Step 1**: select the variables you need from `dog_data_wide`.\n* **Step 2**: pivot all columns (bar the Participant ID) into long format\n* **Step 3**: think about how to separate information of the subscales and timepoints\n* **Step 4**: pivot from long into wide format. Take some inspiration from the `Special case: Variables with subscales` scenario above.\n\n:::\n\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Hints for the plot\n\n* The colour scheme is Dark2 from the colour palette brewer\n* The colour of the trendline is #7570b3\n* Think about how to make the Negative and Positive Affect points different colours. The solution is in @sec-scatter\n* Renaming the different facets is one of those things that should be fixed in the data object instead\n\n:::\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for `data_scatter`\n\n```{r eval=FALSE}\ndata_scatter <- dog_data_wide %>% \n  select(RID, starts_with(\"PANAS\")) %>% \n  pivot_longer(cols = -RID, names_to = \"Q\", values_to = \"Values\") %>% \n  separate(Q, into = c(NA, \"Subscale\", \"Timepoint\"), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Values) %>% \n  mutate(Subscale = case_match(Subscale,\n                               \"NA\" ~ \"Negative Affect\",\n                               \"PA\" ~ \"Positive Affect\"),\n         Subscale = factor(Subscale)) %>% \n  drop_na()\n```\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## Solution for the scatterplot\n\n```{r eval=FALSE}\nggplot(data_scatter, aes(x = pre, y = post, colour = Subscale)) +\n  geom_point() +\n  geom_smooth(method = lm, colour = \"#7570b3\") +\n  facet_wrap(~Subscale) +\n  labs(x = \"Pre-Intervention (Timepoint 1)\",\n       y = \"Post-Intervention (Timepoint 2)\") +\n  scale_colour_brewer(palette = \"Dark2\",\n                      guide = \"none\") +\n  theme_bw()\n```\n\n\n:::\n\n:::\n\nIf you are extremely fast, challenge yourself and re-create one of the other plots.\n\n\n## [Test your knowledge]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n\n### Knowledge check {.unnumbered}\n\n\n#### Question 1 {.unnumbered}\n\nWhy would this line of code not create a barplot, assuming you already loaded all data and libraries and you spelt the data and column names correctly?\n\n```{r, eval = FALSE}\nggplot(summarydata, aes(x = sex)) +\n  geom_barplot()\n```\n\n`r longmcq(sample(c(answer = \"because there is no geom_barplot() and it should be geom_bar()\", x = \"because you have piped the barplot and not added it\", x = \"because you have not included a y axis\", x = \"because this would create a histogram\")))`\n\n\n\n#### Question 2 {.unnumbered}\n\nIf I wanted precisely 5 bars in my histogram, what argument would I use? \n\n`r longmcq(sample(c(answer = \"ggplot() + geom_histogram(bins = 5)\", x = \"ggplot() + geom_histogram(bars = 5)\", x = \"ggplot() + geom_histogram(binwidth = 5)\", x = \"ggplot() + geom_histogram()\")))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain this answer\n\n* `ggplot() + geom_histogram(bins = 5)`. This is the **correct** answer as you are asking ggplot2 to give you the plot organised into 5 bins. \n* `ggplot() + geom_histogram(bars = 5)`. This is incorrect as you bars is not the right argument name. You want 5 bars, but the argument is bins. \n* `ggplot() + geom_histogram(binwidth = 5)`. This is incorrect as binwidth controls the x-axis range to include per bar, rather than the number of bars. \n* `ggplot() + geom_histogram()`. This is incorrect as you did not control the number of bins, so it will default to 30. \n\n:::\n\n\n#### Question 3 {.unnumbered}\n\nYou want to create a scatterplot to show the correlation between two continuous variables, which geom would you use? \n\n`r longmcq(sample(c(answer = \"geom_point()\", x = \"geom_histogram()\", x = \"geom_violin()\", x = \"geom_boxplot()\")))`\n\n\n#### Question 4 {.unnumbered}\n\nTrue or False? To showcase different groups in a scatterplot, you could specify a grouping variable using the `fill` argument to change the colour of the points. `r torf(FALSE)`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Explain this answer\n\nHave a look in the scatterplot section again. There, we explained that we cannot \"colour in\" the area of the points using `fill`, but need to change the outline colour of the points with `colour` instead.\n:::\n\n\n### Error mode {.unnumbered}\n\nSome of the code chunks contain mistakes and result in errors, while others do not produce the expected results. Your task is to identify any issues, explain why they occurred, and, if possible, fix them.\n\nLet's go back to the Palmer penguins for this part.\n\n```{r}\nlibrary(palmerpenguins)\n```\n\n\n#### Question 5 {.unnumbered}\n\nWe want to plot the number of penguins across the different islands.\n\n```{r error=TRUE}\nggplot(penguins, aes(x = islands)) %>% \n  geom_bar()\n```\n\nThe error message is incredibly useful. So that should be an easy fix!\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nTo fix the error, all we need to do is turn the pipe `%>%` into a plus `+`.\n\n```{r}\nggplot(penguins, aes(x = island)) +\n  geom_bar()\n```\n\n:::\n\n\n#### Question 6 {.unnumbered}\n\nWe want to create a violin-boxplot showing the bill length across species, separately for male and female penguins.\n\n```{r error=TRUE}\npenguins_no_na <- penguins %>% \n  drop_na(island, flipper_length_mm, sex)\n\nggplot(penguins_no_na, aes(x = island, y = flipper_length_mm, fill = sex)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2) +\n  labs(x = \"Island\", y = \"Bill length in mm\") +\n  facet_wrap(~sex)\n```\n\nWe got a plot, but is it the one we aimed for? `r mcq(c(x = \"yes\", answer = \"no\"))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nThis was a tricky one. The code runs, so we think everything is fine. Despite having re-labelled the y-axis \"Bill length in mm\", it's really showing the flipper length. Did you spot this???\n\n```{r}\npenguins_no_na <- penguins %>% \n  drop_na(island, bill_length_mm, sex)\n\nggplot(penguins_no_na, aes(x = island, y = bill_length_mm, fill = sex)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2) +\n  labs(x = \"Island\", y = \"Bill length in mm\") +\n  facet_wrap(~sex)\n```\n\n:::\n\n#### Question 7 {.unnumbered}\n\nThis time, we want to show the relationship between flipper length and body mass of the penguins. The following code runs, but the x- and y-axes are misbehaving somehow. Not what we wanted. Any idea why?\n\n```{r}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, colour = island)) +\n  geom_point() +\n  scale_colour_viridis_d(name = \"Island\") +\n  scale_y_discrete(name = \"Body mass in g\",\n                     breaks = seq(2500, 6500, 500),\n                     limits = c(2500, 6500)) +\n  scale_x_discrete(name = \"Flipper length in mm\")\n```\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nWe used the wrong function for continuous variables. The error message helpfully asked us if we either meant to turn something into a factor or use `scale_*_continuous()` instead.\n\nIndeed, we used  `scale_x_discrete` and `scale_y_discrete`, instead of `scale_x_continuous` and `scale_y_continuous`. We must honour the variable type when we customise plots, so always check what type of variable is on each axis and which function lets you edit it.\n\n```{r eval=FALSE}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, colour = island)) +\n  geom_point() +\n  scale_colour_viridis_d(name = \"Island\") +\n  scale_y_continuous(name = \"Body mass in g\",\n                     breaks = seq(2500, 6500, 500),\n                     limits = c(2500, 6500)) +\n  scale_x_continuous(name = \"Flipper length in mm\")\n```\n:::\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["https://use.fontawesome.com/releases/v5.13.0/css/all.css","include/booktem.css","include/webex.css","include/glossary.css","include/style.css","include/custom.scss"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"05-dataviz2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","lightbox":true,"bibliography":["include/references.bib"],"csl":"include/apa.csl","theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover","mainfont":"","monofont":""},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}