{"title":"Projects and R Markdown","markdown":{"headingText":"Projects and R Markdown","headingAttr":{"id":"sec-basics","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r include=FALSE}\nlibrary(webexercises)\n```\n\n\n## Intended Learning Outcomes {.unnumbered}\n\nBy the end of this chapter, you should be able to:\n\n-   Re-familiarise yourself with setting up projects\n-   Re-familiarise yourself with RMarkdown documents\n-   Recap and apply data wrangling procedures to analyse data\n\n## [Individual Walkthrough]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n## R and R Studio\n\nRemember, R is a programming language that you will write code in and RStudio is an Integrated Development Environment (IDE) which makes working with R easier as it's more user friendly. You need both components for this course.\n\nIf this is not ringing any bells yet, have a quick browse through the [materials from year 1](https://psyteachr.github.io/data-skills-v2/sec-intro.html?q=RMark#sec-intro-r){target=\"_blank\"} to refresh your memory.\n\n\n### R server\n\nUse the server *only* if you are unable to install R and RStudio on your computer (e.g., if you are using a Chromebook) or if you encounter issues while installing R on your own machine. Otherwise, you should install R and RStudio directly on your own computer. R and RStudio are already installed on the *R server*.\n\nYou will find the link to the server on Moodle.\n\n\n### Installing R and RStudio on your computer\n\nThe [RSetGo book](https://psyteachr.github.io/RSetGo/){target=\"_blank\"} provides detailed instructions on how to install R and RStudio on your computer. It also includes links to walkthroughs for installing R on different types of computers and operating systems.\n\nIf you had R and RStudio installed on your computer last year, we recommend updating to the latest versions. In fact, it’s a good practice to update them at the start of each academic year. Detailed guidance can be found in @sec-updating-r.\n\nOnce you have installed or updated R and RStudio, return to this chapter.\n\n\n### Settings for Reproducibility\n\nBy now, you should be aware that the Psychology department at the University of Glasgow places a strong emphasis on reproducibility, open science, and raising awareness about questionable research practices (QRPs) and how to avoid them. Therefore, it's important that you work in a reproducible manner so that others (and your future self) can understand and check your work. This also makes it easier for you to reuse your work in the future.\n\nAlways start with a clear workspace. If your `Global Environment` contains anything from a previous session, you can’t be certain whether your current code is working as intended or if it’s using objects created earlier.\n\nTo ensure a clean and reproducible workflow, there are a few settings you should adjust immediately after installing or updating RStudio. In <if>Tools \\> Global Options... General tab</if>\n\n* Uncheck the box labelled <if>Restore .RData into workspace at startup</if> to make sure no data from a previous session is loaded into the environment\n* set <if>Save workspace to .RData on exit</if> to **Never** to prevent your workspace from being saved when you exit RStudio.\n\n![Reproducibility settings in Global Options](images/rstudio_settings_reproducibility.png)\n\n::: {.callout-tip collapse=\"true\"}\n\n## Tip for keeping taps on parentheses\n\nR has included **rainbow parentheses** to help with keeping count on the brackets.\n\nTo enable the feature, go to <if>Tools \\> Global Options... Code tab \\> Display tab</if> and tick the last checkbox \"Use rainbow parentheses\"\n\n![Enable Rainbow parenthesis](images/rainbow.PNG)\n\n:::\n\n### RStudio panes\n\nRStudio has four main panes each in a quadrant of your screen:\n\n* Source pane\n* Environment pane\n* Console pane\n* Output pane\n\n::: {.callout-note icon=\"false\"}\n\n## Your Turn\n\nAre you ready for a quick quiz to see what you remember about the RStudio panes from last year? Click on **Quiz** to see the questions.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n\n## Quiz\n\n**What is their purpose?**\n\n**The Source pane...** `r longmcq(c(answer = \"allows users to view and edit various code-related files, such as .Rmd files\", \"contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs\", \"includes the Environment tab that displays currently saved objects, and the History tab that displays the commands that were executed in the current session along a search function\", \"provides an area to interactively execute code\"))`\n\n**The Environment pane...** `r longmcq(c(\"allows users to view and edit various code-related files, such as .Rmd files\", \"contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs\", answer = \"includes the Environment tab that displays currently saved objects, and the History tab that displays the commands that were executed in the current session along a search function\", \"provides an area to interactively execute code\"))`\n\n**The Console pane...** `r longmcq(c(\"allows users to view and edit various code-related files, such as .Rmd files\", \"contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs\", \"includes the Environment tab that displays currently saved objects, and the History tab that displays the commands that were executed in the current session along a search function\", answer = \"provides an area to interactively execute code\"))`\n\n**The Output pane...** `r longmcq(c(\"allows users to view and edit various code-related files, such as .Rmd files\", answer = \"contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs\", \"includes the Environment tab that displays currently saved objects, and the History tab that displays the commands that were executed in the current session along a search function\", \"provides an area to interactively execute code\"))`\n\n**Where are these panes located by default?**\n\n* The Source pane is located? `r mcq(sample(c(answer = \"top left\", \"bottom left\", \"top right\", \"bottom right\")))`\n* The Environment pane is located? `r mcq(sample(c(\"top left\", \"bottom left\", answer = \"top right\", \"bottom right\")))`\n* The Console pane is located? `r mcq(sample(c(\"top left\", answer = \"bottom left\", \"top right\", \"bottom right\")))`\n* The Output pane is located? `r mcq(sample(c(\"top left\", \"bottom left\", \"top right\", answer = \"bottom right\")))`\n\n:::\n\n:::\n\nIf you were not quite sure about one/any of the panes, check out the [materials from Level 1](https://psyteachr.github.io/data-skills-v2/sec-intro.html?q=RMark#rstudio-panes){target=\"_blank\"}. If you want to know more about them, there is the [RStudio guide on posit](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html){target=\"_blank\"}\n\n\n\n## Activity 1: Creating a new project {#sec-project}\n\nIt's important to create a new RStudio project whenever you start a new project. This practice makes it easier to work in multiple contexts, such as when analysing different datasets simultaneously. Each RStudio project has its own folder location, workspace, and working directories, which keeps all your data and RMarkdown documents organised in one place.\n\nLast year, you learnt how to create projects on the server, so you already know the steps. If cannot quite recall how that was done, go back to the [Level 1 materials](https://psyteachr.github.io/data-skills-v2/sec-intro.html?q=RMark#new-project){target=\"_blank\"}.\n\nOn your own computer, open RStudio, and complete the following steps in this order:\n\n* Click on <if>File \\> New Project...</if>\n* Then, click on \"New Directory\"\n* Then, click on \"New Project\"\n* Name the directory something meaningful (e.g., \"2A_chapter1\"), and save it in a location that makes sense, for example, a dedicated folder you have for your level 2 Psychology labs - you can either select a folder you have already in place or create a new one (e.g., I named my new folder \"Level 2 labs\")\n* Click \"Create Project\". RStudio will restart itself and open with this new project directory as the working directory. If you accidentally close it, you can open it by double-clicking on the project icon in your folder\n* You can also check in your folder structure that everything was created as intended\n\n![Creating a new project](images/project_setup.gif)\n\n::: {.callout-tip collapse=\"true\"}\n\n## Why is the Colour scheme in the gif different to my version?\n\nIn case anyone is wondering why my colour scheme in the gif above looks different to yours, I've set mine to \"Pastel On Dark\" in <if>Tools \\> Global Options... \\> Appearances</if>. And my computer lives in \"dark mode\".\n\n:::\n\n::: callout-important\n\n## Don't nest projects\n\nDon't ever save a new project **inside** another project directory. This can cause some hard-to-resolve problems.\n\n:::\n\n\n## Activity 2: Create a new R Markdown file {#sec-rmd}\n\n* Open a new R Markdown document: click <if>File \\> New File \\> R Markdown</if> or click on the little page icon with a green plus sign (top left).\n* Give it a meaningful `Title` (e.g., Level 2 chapter 1) - you can also change the title later. Feel free to add your name or GUID in the `Author` field author name. Keep the `Default Output Format` as HTML.\n* Once the .`Rmd` opened, you need to save the file.\n* To save it, click <if>File \\> Save As...</if> or click on the little disc icon. Name it something meaningful (e.g., \"chapter_01.Rmd\", \"01_intro.Rmd\"). Make sure there are no spaces in the name - R is not very fond of spaces... This file will automatically be saved in your project folder (i.e., your working directory) so you should now see this file appear in your file viewer pane.\n\n\n![Creating a new `.Rmd` file](images/Rmd_setup.gif)\n\n\nRemember, an R Markdown document or `.Rmd` has \"white space\" (i.e., the markdown for formatted text) and \"grey parts\" (i.e., code chunks) in the default colour scheme (see @fig-rmd). R Markdown is a powerful tool for creating dynamic documents because it allows you to integrate code and regular text seamlessly. You can then knit your `.Rmd` using the `knitr` package to create a final document as either a webpage (HTML), a PDF, or a Word document (.docx). We'll only knit to HTML documents in this course.\n\n\n![R markdown anatomy (image from [https://intro2r.com/r-markdown-anatomy.html](https://intro2r.com/r-markdown-anatomy.html){target=\"_blank\"})](images/rm_components.png)\n\n\n\n### Markdown\n\nThe markdown space in an `.Rmd` is ideal for writing notes that explain your code and document your thought process. Use this space to clarify what your code is doing, why certain decisions were made, and any insights or conclusions you have drawn along the way. These notes are invaluable when revisiting your work later, helping you (or others) understand the rationale behind key decisions, such as setting inclusion/exclusion criteria or interpreting the results of assumption tests. Effectively documenting your work in the markdown space enhances both the clarity and reproducibility of your analysis.\n\nThe markdown space offers a variety of formatting options to help you organise and present your notes effectively. Here are a few of them that can enhance your documentation:\n\n#### Heading levels {.unnumbered}\n\nThere is a variety of **heading levels** to make use of, using the `#` symbol.\n\n\n::: columns\n\n::: column\n\n##### You would incorporate this into your text as: {.unnumbered}\n\n\\# Heading level 1\n\n\\## Heading level 2\n\n\\### Heading level 3\n\n\\#### Heading level 4\n\n\\##### Heading level 5\n\n\\###### Heading level 6\n\n:::\n\n::: column\n\n##### And it will be displayed in your knitted html file as: {.unnumbered}\n\n![](images/heading_levels.PNG)\n\n:::\n\n:::\n\n::: {.callout-important collapse=\"true\"}\n\n## ERROR: My heading levels don't render properly when knitting\n\nYou need a space between the # and the first letter. If the space is missing, the heading will be displayed in the HTML file as ...\n\n#Heading 1\n\n:::\n\n#### Unordered and ordered lists {.unnumbered}\n\nYou can also include **unordered lists** and **ordered lists**. Click on the tabs below to see how they are incorporated\n\n::: panel-tabset\n\n## unordered lists\n\nYou can add **bullet points** using either `*`, `-` or `+` and they will turn into:\n\n*   bullet point (created with `*`)\n* bullet point (created with `-`)\n+   bullet point (created with `+`)\n\nor use bullet points of different levels using 1 tab key press or 2 spaces (for sub-item 1) or 2 tabs/4 spaces (for sub-sub-item 1):\n\n* bullet point item 1\n  * sub-item 1\n    * sub-sub-item 1\n    * sub-sub-item 2\n* bullet point item 2\n\n::: {.callout-important collapse=\"true\"}\n\n## ERROR: My bullet points don't render properly when knitting\n\nYou need an empty row before your bullet points start. If I delete the empty row before the bullet points, they will be displayed in the HTML as ...\n\nText without the empty row: * bullet point created with `*` - bullet point created with `-` + bullet point created with `+`\n\n:::\n\n\n## ordered lists\n\nStart the line with **1.**, **2.**, etc. When you want to include sub-items, either use the `tab` key twice or add **4 spaces**. Same goes for the sub-sub-item: include either 2 tabs (or 4 manual spaces) from the last item or 4 tabs/ 8 spaces from the start of the line.\n\n1. list item 1\n2. list item 2\n    i) sub-item 1 (with 4 spaces)\n        A. sub-sub-item 1 (with an additional 4 spaces from the last indent)\n\n::: {.callout-important collapse=\"true\"}\n\n## My list items don't render properly when knitting\n\nIf you don't leave enough spaces, the list won't be recognised, and your output looks like this:\n\n3.  list item 3\n  i)  sub-item 1 (with only 2 spaces) \n    A. sub-sub-item 1 (with an additional 2 spaces from the last indent)\n\n:::\n\n\n## ordered lists magic\n\nThe great thing though is that you don't need to know your alphabet or number sequences. R markdown will fix that for you\n\nIf I type into my `.Rmd`...\n\n![](images/list_magic.PNG)\n\n...it will be rendered in the knitted HTML output as...\n\n3.  list item 3\n1.  list item 1\n    a)  sub-item labelled \"a)\"\n    i)  sub-item labelled \"i)\"\n        C)  sub-item labelled \"C)\"\n        Z)  sub-item labelled \"Z)\"\n7.  list item 7\n\n\n\n::: {.callout-important collapse=\"true\"}\n\n## ERROR: The labels of the sub-items are not what I thought they would be. You said they are fixing themselves...\n\nYes, they do but you need to label your sub-item lists accordingly. The first label you list in each level is set as the baseline. If they are labelled `1)` instead of `i)` or `A.`, the output will show as follows, but the automatic-item-fixing still works:\n\n7. list item 7\n    1) list item \"1)\" with 4 spaces\n        1) list item \"1)\" with 8 spaces\n        6) this is an item labelled \"6)\" (magically corrected to \"2.\")\n:::\n\n:::\n\n#### Emphasis {.unnumbered}\n\nInclude **emphasis** to draw attention to keywords in your text:\n\n| R markdown syntax           | Displayed in the knitted HTML file |\n|:----------------------------|:-----------------------------------|\n| \\*\\*bold text\\*\\*           | **bold text**                      |\n| \\*italic text\\*             | *italic text*                      |\n| \\*\\*\\*bold and italic\\*\\*\\* | ***bold and italic***              |\n\n\nOther examples can be found in the [R Markdown Cheat Sheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf){target=\"_blank\"}\n\n\n\n### Code chunks {#sec-chunks}\n\nEverything you write inside the **code chunks** will be interpreted as code and executed by R. Code chunks start with ```` ``` ```` followed by an `{r}` which specifies the coding language R, some space for code, and ends with ```` ``` ````. If you accidentally delete one of those backticks, your code won't run and/or your text parts will be interpreted as part of the code chunks or vice versa. This should be evident from the colour change - more white than expected typically indicates missing starting backticks, whilst too much grey/not enough white suggests missing ending backticks. But no need to fret if that happens - just add the missing backticks manually.\n\n\nYou can **insert a new code chunk** in several ways:\n\n\n* Click the `Insert a new code chunk` button in the RStudio Toolbar (green icon at the top right corner of the `Source pane`).\n* Select <if>Code \\> Insert Chunk</if> from the menu.\n* Using the shortcut `Ctrl + Alt + I` for Windows or `Cmd + Option + I` on MacOSX.\n* Type ```` ```{r} ```` and ```` ``` ```` manually\n\n\n```{r fig-rmd, echo=FALSE, fig.cap=\"Default `.Rmd` with highlighting - names in pink and knitr display options in purple\"}\nknitr::include_graphics(\"images/default_highlighted.png\")\n```\n\n\n\nWithin the curly brackets of a code chunk, you can **specify a name** for the code chunk (see pink highlighting in @fig-rmd). The chunk name is not necessarily required; however, it is good practice to give each chunk a unique name to support more advanced knitting approaches. It also makes it easier to reference and manage chunks.\n\nWithin the curly brackets, you can also place **rules and arguments** (see purple highlighting in @fig-rmd) to control how your code is executed and what is displayed in your final HTML output. The most common **knitr display options** include:\n\n\n| Code                | Does code run | Does code show | Do results show |\n|:--------------------|:-------------:|:--------------:|:---------------:|\n| eval=FALSE          |      NO       |      YES       |       NO        |\n| echo=TRUE (default) |      YES      |      YES       |       YES       |\n| echo=FALSE          |      YES      |       NO       |       YES       |\n| results='hide'      |      YES      |      YES       |       NO        |\n| include=FALSE       |      YES      |       NO       |       NO        |\n\n\n::: callout-important\n\nThe table above will be incredibly important for the data skills homework II. When solving error mode items you will need to pay attention to the first one `eval = FALSE`.\n\n:::\n\nOne last thing: In your newly created `.Rmd` file, delete everything below line 12 (keep the set-up code chunk) and save your `.Rmd` by clicking on the disc symbol.\n\n![Delete everything below line 12](images/delete_12.gif)\n\n::: {.callout-note icon=\"false\"}\n\n## Your Turn\n\nThat was quite a long section about what Markdown can do. I promise, we'll practice that more later. For the minute, we want you to create a new level 2 heading on line 12 and give it a meaningful heading title (something like \"Loading packages and reading in data\" or \"Chapter 1\").\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\nOn line 12, you should have typed **## Loading packages and reading in data** (or whatever meaningful title you chose). This will create level 2 heading once we knit the `.Rmd`.\n\n:::\n\n:::\n\n\n## Activity 3: Download the data {#sec-download_data_ch1}\n\nThe data for chapters 1-3. Download it here: [data_ch1.zip](data/data_ch1.zip \"download\"). There are 2 csv files contained in a zip folder. One is the data file we are going to use today `prp_data_reduced.csv` and the other is an Excel file `prp_codebook` that explains the variables in the data.\n\nThe first step is to **unzip the zip folder** so that the files are placed within the same folder as your project.\n\n* Place the zip folder within your 2A_chapter1 folder\n* Right mouse click --> `Extract All...`\n* Check the folder location is the one to extract the files to\n* Check the extracted files are placed next to the project icon\n* Files and project should be visible in the Output pane in RStudio\n\n::: {.callout-note collapse=\"false\"}\n\n## Screenshots for \"unzipping a zip folder\"\n\n::: {layout-ncol=\"1\"}\n\n![](images/pic1.PNG){fig-align=\"center\"}\n\n![](images/pic23.PNG){fig-align=\"center\"}\n\n![](images/pic45.PNG){fig-align=\"center\"}\n\nUnzipping a zip folder\n\n:::\n:::\n\nThe paper by Pownall et al. was a **registered report** published in 2023, and the original data can be found on OSF ([https://osf.io/5qshg/](https://osf.io/5qshg/){target=\"_blank\"}).\n\n**Citation**\n\n> Pownall, M., Pennington, C. R., Norris, E., Juanchich, M., Smailes, D., Russell, S., Gooch, D., Evans, T. R., Persson, S., Mak, M. H. C., Tzavella, L., Monk, R., Gough, T., Benwell, C. S. Y., Elsherif, M., Farran, E., Gallagher-Mitchell, T., Kendrick, L. T., Bahnmueller, J., . . . Clark, K. (2023). Evaluating the Pedagogical Effectiveness of Study Preregistration in the Undergraduate Dissertation. *Advances in Methods and Practices in Psychological Science, 6*(4). [https://doi.org/10.1177/25152459231202724](https://doi.org/10.1177/25152459231202724){target=\"_blank\"}\n\n**Abstract**\n\n> Research shows that questionable research practices (QRPs) are present in undergraduate final-year dissertation projects. One entry-level Open Science practice proposed to mitigate QRPs is “study preregistration,” through which researchers outline their research questions, design, method, and analysis plans before data collection and/or analysis. In this study, we aimed to empirically test the effectiveness of preregistration as a pedagogic tool in undergraduate dissertations using a quasi-experimental design. A total of 89 UK psychology students were recruited, including students who preregistered their empirical quantitative dissertation (*n* = 52; experimental group) and students who did not (*n* = 37; control group). Attitudes toward statistics, acceptance of QRPs, and perceived understanding of Open Science were measured both before and after dissertation completion. Exploratory measures included capability, opportunity, and motivation to engage with preregistration, measured at Time 1 only. This study was conducted as a Registered Report; Stage 1 protocol: https://osf.io/9hjbw (date of in-principle acceptance: September 21, 2021). Study preregistration did not significantly affect attitudes toward statistics or acceptance of QRPs. However, students who preregistered reported greater perceived understanding of Open Science concepts from Time 1 to Time 2 compared with students who did not preregister. Exploratory analyses indicated that students who preregistered reported significantly greater capability, opportunity, and motivation to preregister. Qualitative responses revealed that preregistration was perceived to improve clarity and organization of the dissertation, prevent QRPs, and promote rigor. Disadvantages and barriers included time, perceived rigidity, and need for training. These results contribute to discussions surrounding embedding Open Science principles into research training.\n\n**Changes made to the dataset**\n\nWe made some changes to the dataset for the purpose of increasing difficulty for data wrangling (@sec-wrangling and @sec-wrangling2) and data visualisation (@sec-dataviz and @sec-dataviz2). This will ensure some \"teachable moments\". The changes are as follows:\n\n* We removed some of the variables to make the data more manageable for teaching purposes.\n* We recoded some values from numeric responses to labels (e.g., `understanding`).\n* We added the word \"years\" to one of the `Age` entries.\n* We tidied a messy column `Ethnicity` but introduced a similar but easier-to-solve \"messiness pattern\" when recoding the `understanding` data.\n* The scores in the original file were already corrected from reverse-coded responses. We reversed that process to present raw data here.\n\n\n\n\n## Activity 4: Installing packages, loading packages, and reading in data\n\n### Installing packages {#sec-install_packages}\n\nWhen you install R and RStudio for the first time (or after an update), most of the packages we will be using won’t be pre-installed. Before you can load new packages like `tidyverse`, you will need to install them.\n\nIf you try to load a package that has not been installed yet, you will receive an error message that looks something like this: `Error in library(tidyverse) : there is no package called 'tidyverse'`. \n\nTo fix this, simply install the package first. **In the console**, type the command `install.packages(\"tidyverse\")`. This **only needs to be done once after a fresh installation**. After that, you will be able to load the `tidyverse` package into your library whenever you open RStudio.\n\n::: callout-important\n\n## Install packages from the console only\n\nNever include `install.packages()` in the Rmd. Only install packages from the console pane or the packages tab of the lower right pane!!!\n:::\n\n\nNote, there will be other packages used in later chapters that will also need to be installed before their first use, so this error is not limited to `tidyverse`.\n\n\n### Loading packages and reading in data\n\nThe first step is to load in the packages we need and read in the data. Today, we'll only be using `tidyverse`, and `read_csv()` will help us store the data from `prp_data_reduced.csv` in an object called data_prp.\n\nCopy the code into a code chunk in your `.Rmd` file and run it. You can either click the `green error` to run the entire code chunk, or use the shortcut `Ctrl + Enter` (Windows) or `Cmd + Enter` (Mac) to run a line of code/ pipe from the Rmd.\n\n```{r eval=FALSE}\nlibrary(tidyverse)\ndata_prp <- read_csv(\"prp_data_reduced.csv\")\n```\n\n\n\n```{r echo=FALSE}\n## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path\nlibrary(tidyverse)\ndata_prp <- read_csv(\"data/prp_data_reduced.csv\")\n```\n\n\n\n\n## Activity 5: Familiarise yourself with the data {#sec-familiarise}\n\n* Look at the **Codebook** to get a feel of the variables in the dataset and how they have been measured. Note that some of the columns were deleted in the dataset you have been given.\n* You'll notice that some questionnaire data was collected at 2 different time points (i.e., SATS28, QRPs, Understanding_OS)\n* some of the data was only collected at one time point (i.e., supervisor judgements, OS_behav items, and Included_prereg variables are t2-only variables)\n\n\n\n### First glimpse at the data\n\nBefore you start wrangling your data, it is important to understand what kind of data you're working with and what the format of your dataframe looks like.\n\nAs you may have noticed, `read_csv()` provides a **message** listing the data types in your dataset and how many columns are of each type. Plus, it shows a few examples columns for each data type.\n\nTo obtain more detailed information about your data, you have several options. Click on the individual tabs to see the different options available. Test them out in your own `.Rmd` file and use whichever method you prefer (but do it).\n\n::: callout-warning\n\nSome of the output is a bit long because we do have quite a few variables in the data file.\n\n:::\n\n::: panel-tabset\n\n## visual inspection 1\n\nIn the `Global Environment`, click the blue arrow icon next to the object name `data_prp`. This action will expand the object, revealing details about its columns. The `$` symbol is commonly used in Base R to access a specific column within your dataframe.\n\n![Visual inspection of the data](images/data_prp.PNG)\n\nCon: When you have quite a few variables, not all of them are shown.\n\n## `glimpse()`\n\nUse `glimpse()` if you want a more detailed overview you can see on your screen. The output will display rows and column numbers, and some examples of the first couple of observations for each variable.\n\n\n```{r}\nglimpse(data_prp)\n```\n\n\n## `spec()`\n\nYou can also use `spec()` as suggested in the message above and then it shows you a list of the data type in every single column. But it doesn't show you the number of rows and columns.\n\n\n```{r}\nspec(data_prp)\n```\n\n\n## visual inspection 2\n\nIn the `Global Environment`, click on the object name `data_prp`. This action will open the data in a new tab. Hovering over the column headings with your mouse will also reveal their data type. However, it seems to be a fairly tedious process when you have loads of columns.\n\n::: {.callout-important collapse=\"true\"}\n\n## Hang on, where is the rest of my data? Why do I only see 50 columns?\n\nOne common source of confusion is not seeing all your columns when you open up a data object as a tab. This is because RStudio shows you a maximum of 50 columns at a time. If you have more than 50 columns, navigate with the arrows to see the remaining columns.\n\n![Showing 50 columns at a time](images/50_col.PNG)\n\n:::\n\n:::\n\n::: {.callout-note icon=\"false\"}\n\n## Your Turn\n\nNow that you have tested out all the options in your own `.Rmd` file, you can probably answer the following questions:\n\n* How many observations? `r fitb(\"89\")`\n* How many variables? `r fitb(\"91\")`\n* How many columns are `col_character` or `chr` data type? `r fitb(\"17\")`\n* How many columns are `col_double` or `dbl` data type? `r fitb(\"74\")`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nThe visual inspections shows you the **number of observations and variables**. `glimpse()` also gives you that information but calls them **rows and columns** respectively.\n\nThe **data type information** actually comes from the output when using the `read_csv()` function. Did you notice the information on **Column specification** (see screenshot below)?\n\n![message from `read_csv()` when reading in the data](images/col_spec.PNG)\n\nWhilst `spec()` is quite useful for data type information per individual column, it doesn't give you the total count of each data type. So it doesn't really help with answering the questions here - unless you want to count manually from its extremely long output.\n\n:::\n\nIn your `.Rmd`, include a **new heading level 2** called \"Information about the data\" (or something equally meaningful) and jot down some notes about `data_prp`. You could include the citation and/or the abstract, and whatever information you think you should note about this dataset (e.g., any observations from looking at the codebook?). You could also include some notes on the functions used so far and what they do. Try to incorporate some **bold**, *italic* or ***bold and italic*** emphasis and perhaps a bullet point or two.\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Possible solution\n\n\\#\\# Information about the data\n\nThe data is from Pownall et al. (2023), and I can find the paper here: https://doi.org/10.1177/25152459231202724.\n\nI've noticed in the prp codebook that the SATS-28 questionnaire has quite a few \\*reverse-coded items\\*, and the supervisor support questionnaire also has a reverse-coded item.\n\nSo far, I think I prefer \\*\\*glimpse()\\*\\* to show me some more detail about the data. Specs() is too text-heavy for me which makes it hard to read.\n\nThings to keep in mind:\n\n* \\*\\*don't forget to load in tidyverse first!!!\\*\\*\n* always read in the data with \\*\\*read_csv\\*\\*, \\*\\*\\*never ever use read.csv\\*\\*\\*!!!\n\n![The output rendered in a knitted html file](images/knitted_markdown.PNG)\n\n:::\n\n:::\n\n### Data types {#sec-datatypes}\n\nEach variable has a **data type**, such as numeric (numbers), character (text), and logical (TRUE/FALSE values), or a special class of factor. As you have just seen, our `data_prp` only has character and numeric columns (so far).\n\n**Numeric data** can be double (`dbl`) or integer (`int`). Doubles can have decimal places (e.g., 1.1). Integers are the whole numbers (e.g., 1, 2, -1) and are displayed with the suffix L (e.g., 1L). This is not overly important but might leave you less puzzled the next time you see an L after a number.\n\n**Characters** (also called “strings”) is anything written between quotation marks. This is usually text, but in special circumstances, a number can be a character if it placed within quotation marks. This can happen when you are recoding variables. It might not be too obvious at the time, but you won't be able to calculate anything if the number is a character\n\n::: panel-tabset\n\n## Example data types\n\n```{r}\ntypeof(1)\ntypeof(1L)\ntypeof(\"1\")\ntypeof(\"text\")\n```\n\n## numeric computation\n\nNo problems here...\n\n```{r}\n1+1\n```\n\n## character computation\n\nWhen the data type is incorrect, you won't be able to compute anything, despite your numbers being shown as numeric values in the dataframe. The error message tells you exactly what's wrong with it, i.e., that you have `non-numeric arguments`.\n\n```{r, error = TRUE}\n\"1\"+\"1\" # ERROR\n```\n\n:::\n\n**Logical** data (also sometimes called “Boolean” values) are one of two values: TRUE or FALSE (written in uppercase). They become really important when we use `filter()` or `mutate()` with conditional statements such as `case_when()`. More about those in @sec-wrangling2.\n\n\nSome commonly used logical operators:\n\n| operator | description                                    |\n|:---------|:-----------------------------------------------|\n| \\>       | greater than                                   |\n| \\>=      | greater than or equal to                       |\n| \\<       | less than                                      |\n| \\<=      | less than or equal to                          |\n| ==       | equal to                                       |\n| !=       | not equal to                                   |\n| %in%     | TRUE if any element is in the following vector |\n\n\nA **factor** is a specific type of integer or character that lets you assign the order of the categories. This becomes useful when you want to display certain categories in \"the correct order\" either in a dataframe (see *arrange*) or when plotting (see @sec-dataviz/ @sec-dataviz2).\n\n\n\n### Variable types\n\nYou've already encountered them in [Level 1](https://psyteachr.github.io/data-skills-v2/intro-to-probability.html){target=\"_blank\"} but let's refresh. Variables can be classified as **continuous** (numbers) or **categorical** (labels).\n\n**Categorical** variables are properties you can count. They can be **nominal**, where the categories don't have an order (e.g., gender) or **ordinal** (e.g., Likert scales either with numeric values 1-7 or with character labels such as \"agree\", \"neither agree nor disagree\", \"disagree\"). Categorical data may also be **factors** rather than characters.\n\n**Continuous variables** are properties you can measure and calculate sums/ means/ etc. They may be rounded to the nearest whole number, but it should make sense to have a value between them. Continuous variables always have a **numeric** data type (i.e. `integer` or `double`).\n\n::: callout-tip\n\n## Why is this important you may ask?\n\n**Knowing your variable and data types will help later on when deciding on an appropriate plot (see @sec-dataviz and @sec-dataviz2) or which inferential test to run (@sec-nhstI to @sec-factorial).**\n\n:::\n\n::: {.callout-note icon=\"false\"}\n\n## Your Turn\n\nAs we've seen earlier, `data_prp` only had character and numeric variables which hardly tests your understanding to see if you can identify a variety of data types and variable types. So, for this little quiz, we've spiced it up a bit. We've selected a few columns, shortened some of the column names, and modified some of the data types. Here you can see the first few rows of the new object `data_quiz`. *You can find the code with explanations at the end of this section.*\n\n```{r echo=FALSE}\ndata_quiz <- data_prp %>% \n  select(Code, Age, Gender, Ethnicity, Secondyeargrade, QRP_item = QRPs_3_Time1, QRPs_mean = QRPs_Acceptance_Time2_mean, Understanding_item = Understanding_OS_1_Time1) %>% \n  mutate(Gender = factor(Gender),\n         Secondyeargrade = factor(Secondyeargrade,\n                                  levels = c(1, 2, 3, 4, 5),\n                                  labels = c(\"≥ 70% (1st class grade)\", \"60-69% (2:1 grade)\", \"50-59% (2:2 grade)\", \"40-49% (3rd class)\", \"< 40%\")),\n         `QRP_item > 4` = case_when(\n           QRP_item > 4 ~ TRUE, \n           .default = FALSE))\n```\n\n```{r echo=FALSE}\n# the `head()` function shows the first n number of rows of a dataset (here 5)\nhead(data_quiz, n = 5)\n```\n\n```{r}\nglimpse(data_quiz)\n```\n\n\n\nSelect from the dropdown menu the variable type and their data types for each of the columns.\n\n```{r, include = FALSE}\n# variable type\ncon <- c(answer = \"continuous\", x = \"nominal\", x = \"ordinal\")\nnom <- c(x = \"continuous\", answer = \"nominal\", x = \"ordinal\")\nord <- c(x = \"continuous\", x = \"nominal\", answer = \"ordinal\")\n\n# data type\nnum <- c(answer = \"numeric\", x = \"character\", x = \"logical\", x = \"factor\")\nchr <- c(x = \"numeric\", answer = \"character\", x = \"logical\", x = \"factor\")\nlog <- c(x = \"numeric\", x = \"character\", answer = \"logical\", x = \"factor\")\nfctr <- c(x = \"numeric\", x = \"character\", x = \"logical\", answer = \"factor\")\n\n```\n\n| Column               | Variable type | Data type     |\n|:---------------------|:--------------|:--------------|\n| `Age`                | `r mcq(con)`  | `r mcq(chr)`  |\n| `Gender`             | `r mcq(nom)`  | `r mcq(fctr)` |\n| `Ethinicity`         | `r mcq(nom)`  | `r mcq(chr)`  |\n| `Secondyeargrade`    | `r mcq(ord)`  | `r mcq(fctr)` |\n| `QRP_item`           | `r mcq(ord)`  | `r mcq(num)`  |\n| `QRPs_mean`          | `r mcq(con)`  | `r mcq(num)`  |\n| `Understanding_item` | `r mcq(ord)`  | `r mcq(chr)`  |\n| `QRP_item > 4`       | `r mcq(nom)`  | `r mcq(log)`  |\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Revealing the mystery code that created `data_quiz`\n\nThe code might look a bit complex for the minute despite the line-by-line explanations below. Come back to it after completing chapter 2.\n\n```{r eval=FALSE}\ndata_quiz <- data_prp %>% \n  select(Code, Age, Gender, Ethnicity, Secondyeargrade, QRP_item = QRPs_3_Time1, QRPs_mean = QRPs_Acceptance_Time2_mean, Understanding_item = Understanding_OS_1_Time1) %>% \n  mutate(Gender = factor(Gender),\n         Secondyeargrade = factor(Secondyeargrade,\n                                  levels = c(1, 2, 3, 4, 5),\n                                  labels = c(\"≥ 70% (1st class grade)\", \"60-69% (2:1 grade)\", \"50-59% (2:2 grade)\", \"40-49% (3rd class)\", \"< 40%\")),\n         `QRP_item > 4` = case_when(\n           QRP_item > 4 ~ TRUE, \n           .default = FALSE))\n```\n\nLets go through this line by line:\n\n* **line 1**: creates a new object called `data_quiz` and it is based on the already existing data object `data_prp`\n* **line 2**: we are selecting a few variables of interest, such as Code, Age etc. Some of those variables were renamed in the process according to the structure `new_name = old_name`, for example QRP item 3 at time point 1 got renamed as `QRP_item`.\\\n* **line 3**: The function `mutate()` is used to create a new column called `Gender` that turns the existing column `Gender` from a numeric value into a factor. R simply overwrites the existing column of the same name. If we had named the new column `Gender_factor`, we would have been able to retain the original `Gender` column and `Gender_factor` would have been added as the last column.\n* **line 4-6**: See how the line starts with an indent which indicates we are still within the `mutate()` function. You can also see this by counting brackets - in line 3 there are 2 opening brackets but only 1 closes.\n    * Similar to `Gender`, we are replacing the \"old\" `Secondyeargrade` with the new `Secondyeargrade` column that is now a factor.\n    * Turning our variable `Secondyeargrade` into a factor, spot the difference between this attempt and the one we used for `Gender`? Here we are using a lot more arguments in that factor function, namely levels and labels. **Levels** describes the unique values we have for that column, and in **labels** we want to define how these levels will be shown in the data object. If you don't add the levels and labels argument, the labels will be the labels (as you can see in the `Gender` column in which we kept the numbers).\n* **line 7**: Doesn't start with a function name and has an indent, which means we are *still* within the `mutate()` function - count the opening and closing brackets to confirm.\n    * Here, we are creating a new column called `QRP_item > 4`. Notice the two backticks we have to use to make this weird column name work? This is because it has spaces (and we did mention that R doesn't like spaces). So the backticks help R to group it as a unit/ a single name.\n    * Next we have a `case_when()` function which helps executing conditional statements. We are using it to check whether a statement is TRUE or FALSE. Here, we ask whether the QRP item (column `QRP_item`) is larger than 4 (midpoint of the scale) using the Boolean operator `>`. If the statement is `TRUE`, the label `TRUE` should appear in column `QRP_item > 4`. Otherwise, if the value is equal to 4 or smaller, the label should read `FALSE`. We will come back to conditional statements in @sec-wrangling. But long story short, this Boolean expression created the only logical data type in `data_quiz`.\n:::\n\nAnd with this, we are done with the individual walkthrough. Well done :)\n\n\n\n\n\n\n\n\n## [Test your knowledge]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\nAre you ready for some knowledge check questions to test your understanding of the chapter? We also have some faulty codes. See if you can spot what's wrong with them.\n\n### Knowledge check {.unnumbered}\n\n#### Question 1 {.unnumbered}\n\nOne of the key first steps when we open RStudio is to: `r longmcq(c(x = \"put on some music as we will be here a while\", answer = \"open an existing project or create a new one\", x = \"make a coffee\", x = \"check out the news\"))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain this answer\n\nOpening an existing project (e.g., when coming back to the same dataset) or creating a new project (e.g., for a new task or new dataset) ensures that subsequent `.Rmd` files, any output, figures, etc are saved within the same folder on your computer (i.e., the working directory). If the`.Rmd` files or data is not in the same folder as \"the project icon\", things can get messy and code might not run.\n\n:::\n\n\n#### Question 2 {.unnumbered}\n\nWhen using the default environment colour settings for RStudio, what colour would the background of a code chunk be in R Markdown? `r mcq(c(x = \"red\", x = \"white\", x = \"green\", answer = \"grey\"))`\n\nWhen using the default environment colour settings for RStudio, what colour would the background of normal text be in R Markdown? `r mcq(c(x = \"red\", answer = \"white\", x = \"green\", x = \"grey\"))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain this answer\n\nAssuming you have not changed any of the settings in RStudio, code chunks will tend to have a grey background and normal text will tend to have a white background. This is a good way to check that you have closed and opened code chunks correctly.\n\n:::\n\n\n\n#### Question 3 {.unnumbered}\n\nCode chunks start and end with: `r longmcq(c(x = \"three single quotes\", answer = \"three backticks\", x = \"three double quotes\", x = \"three single asterisks\"))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain this answer\n\nCode chunks always take the same general format of three backticks followed by curly parentheses and a lower case r inside the parentheses (`{r}`). People often mistake these backticks for single quotes but that will not work. If you have set your code chunk correctly using backticks, the background colour should change to grey from white.\n\n:::\n\n\n\n#### Question 4 {.unnumbered}\n\nWhat is the correct way to include a code chunk in RMarkdown that will be executed but neither the code nor its output will be shown in the final HTML document? `r mcq(c(x = \"{r, echo=FALSE}\", x = \"{r, eval=FALSE}\", answer = \"{r, include=FALSE}\", x = \"{r, results='hide'}\"))`\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain this answer\n\nCheck the table of knitr display options in @sec-chunks.\n\n* {r, echo=FALSE} also executes the code and does not show the code, but it *does* display the result in the knitted html file. (matches 2/3 criteria)\n* {r, eval=FALSE} does not show the results but does *not* execute the code and it *does* show it in the knitted file. (matches 1/3 criteria)\n* {r, results=“hide”} executes the code and does not show results, however, it *does* include the code in the knitted html document. (matches 2/3 criteria)\n\n:::\n\n\n\n### Error mode {.unnumbered}\n\nSome of these codes have mistakes in them, other code chunks are not quite producing what was aimed for. Your task is to spot anything faulty, explain why the things happened, and perhaps try to fix them.\n\n\n\n#### Question 5 {.unnumbered}\n\nYou want to read in data with the `read_csv()` function. You have just stated R, created a new `.Rmd` file, and typed the following code into your code chunk.\n\n```{r eval=FALSE}\ndata <- read_csv(\"data.csv\")\n```\n\n\nHowever, R gives you an error message: `could not find function \"read_csv\"`. What could be the reason?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\n\"Could not find function\" is an indication that you have forgotten to load in tidyverse. Because `read_csv()` is a function in the tidyverse collection, R cannot find it.\n\nFIX: Add `library(tidyverse)` prior to reading in the data and run the code chunk again.\n\n:::\n\n\n\n#### Question 6 {.unnumbered}\n\nYou want to read in data with the `read_csv()` function. This time, you are certain you have loaded in tidyverse first. The code is as follows:\n\n```{r eval=FALSE}\nlibrary(tidyverse)\ndata <- read_csv(\"data.csv\")\n```\n\nThe error message shows `'data.csv' does not exist in current working directory`. You check your folder and it looks like this:\n\n![](images/error_ch1_01.PNG)\n\nWhy is there an error message?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nR is looking for a csv file that is called data which is currently not in the working directory. We may assume it's in the data folder. Perhaps that happened when unzipping the zip file. So instead of placing the csv file on the same level as the project icon, it was unzipped into a folder named data.\n\nFIX - option 1: Take the `data.csv` out of the data folder and place it next to the project icon and the `.Rmd` file.\n\nFIX - option 2: Modify your R code to tell R that the data is in a separate folder called data, e.g., ...\n\n```{r eval=FALSE}\nlibrary(tidyverse)\ndata <- read_csv(\"data/data.csv\")\n```\n\n:::\n\n\n\n#### Question 7 {.unnumbered}\n\n\nYou want to load `tidyverse` into the library. The code is as follows:\n\n```{r eval=FALSE}\nlibrary(tidyverse)\n```\n\n\nThe error message says: `Error in library(tidyverse) : there is no package called ‘tidyverse’`\n\nWhy is there an error message and how can we fix this?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nIf R says there is no package called `tidyverse`, means you haven't installed the package yet. This could be an error message you receive either after switching computers or a fresh install of R and RStudio.\n\nFIX: Type `install.packages(\"tidyverse\")` into your **Console**.\n\n:::\n\n\n\n#### Question 8 {.unnumbered}\n\nYou knitted your `.Rmd` into a html but the output is not as expected. You see the following:\n\n![](images/error_knitted.PNG)\n\nWhy did the file not knit properly?\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Explain the solution\n\nThere is a backtick missing in the code chunk. If you check your `.Rmd` file, you can see that the code chunk does not show up in grey which means it's one of the 3 backticks at the beginning of the chunk.\n\n![](images/error_ch1_08.PNG)\n\nFIX: Add a single backtick manually where it's missing.\n\n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["https://use.fontawesome.com/releases/v5.13.0/css/all.css","include/booktem.css","include/webex.css","include/glossary.css","include/style.css","include/custom.scss","include/styles.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"01-basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","lightbox":true,"bibliography":["include/references.bib"],"csl":"include/apa.csl","theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"code-copy":"hover","mainfont":"","monofont":""},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}