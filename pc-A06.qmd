# 2A Lab 7 Week 9  {.unnumbered}


```{r include=FALSE}
library(webexercises)
```

**This is the pair coding activity related to @sec-nhstI.**


::: {.callout-important}

This pair coding task is a bit long to fully complete in the lab. Try to progress as far as possible without compromising understanding, and treat the remaining section as a "Challenge Yourself" activity.

**Intentions behind it?**

The task is designed to walk you through conducting a full Chi-Square test on a dataset different from the one in the chapter. I did not want to cherry-pick specific steps from the Chi-Square test, as real-life data analysis requires computing descriptives and checking assumptions before conducting inferential statistics.

:::

## Task 1: Open the R project for the lab {.unnumbered}

## Task 2: Create a new `.Rmd` file {.unnumbered}

... and name it something useful. If you need help, have a look at @sec-rmd.

## Task 3: Load in the library and read in the data {.unnumbered}

The data should already be in your project folder. If you want a fresh copy, you can download the data again here: [data_pair_coding](data/data_pair_coding.zip "download").

We are using the packages `tidyverse` and `lsr` today, and the data file we need to read in is `dog_data_clean_wide.csv`. I've named my data object `dog_data_wide` to shorten the name but feel free to use whatever object name sounds intuitive to you.

If you have not worked through chapter 6 yet, you may need to install the package `lsr` before you can load it into the library. Run `install.packages("lsr")` in your **CONSOLE**.

```{r reading in data for me, echo=FALSE, message=FALSE}
library(tidyverse)
library(lsr)

dog_data_wide <- read_csv("data/dog_data_clean_wide.csv")
dog_data_long <- read_csv("data/dog_data_clean_long.csv")

## I need dog_chi
dog_chi <- dog_data_wide %>% 
  # Step 1
  select(RID, Year_of_Study, Live_Pets) %>% 
  # Step 2
  drop_na() %>% 
  # STep 3
  mutate(Year_of_Study = factor(Year_of_Study,
                                levels = c("First", "Second", "Third", "Fourth", "Fifth or above")),
         Live_Pets = factor(Live_Pets,
                            levels = c("yes", "no")))
```


## Task 4: Tidy data for a Chi-Square t-test {.unnumbered}

Look at `dog_data_wide` and choose two categorical variables. To guide you through this example, I have selected Year of Study and whether or not the students owned pets as my categorical variable.


* **Step 1**: Select all relevant columns from `dog_data_wide`. In my case, those would be the participant ID `RID`, `Year_of_Study`, and `Live_Pets`. Store this data in an object called `dog_chi`.

* **Step 2**: Check if we have any missing values in the `dog_chi`. If so remove them with the function `drop_na()`.

* **Step 3**: Convert `Year_of_Study` and `Live_Pets` into factors. Feel free to order the categories meaningfully.

::: {.callout-note collapse="true" icon="false"}

## Hints

```{r eval=FALSE}
dog_chi <- ??? %>% 
  # Step 1
  select(???, ???, ???) %>% 
  # Step 2
  drop_na() %>% 
  # Step 3
  mutate(Year_of_Study = ???(Year_of_Study,
                                levels = c("First", "Second", "Third", "Fourth", "Fifth or above")),
         Live_Pets = ???(Live_Pets,
                            levels = c("yes", "no")))
```

:::


::: {.callout-caution collapse="true" icon="false"}

## Solution for Tasks 3 and 4

```{r eval=FALSE}
# loading tidyverse and lsr into the library
library(tidyverse)
library(lsr)

# reading in `dog_data_clean_wide.csv`
dog_data_wide <- read_csv("dog_data_clean_wide.csv")

# Task 4: Tidying 
dog_chi <- dog_data_wide %>% 
  # Step 1
  select(RID, Year_of_Study, Live_Pets) %>% 
  # Step 2
  drop_na() %>% 
  # Step 3
  mutate(Year_of_Study = factor(Year_of_Study,
                                levels = c("First", "Second", "Third", "Fourth", "Fifth or above")),
         Live_Pets = factor(Live_Pets,
                            levels = c("yes", "no")))

```


:::

## Task 5: Compute descriptives {.unnumbered}

Create a frequency table (or contingency table to be more exact) from `dog_chi`, i.e., we need counts for each combination of the variables. Store the data in a new data object `dog_chi_contingency`. `dog_chi_contingency` should look like this:

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(kableExtra)

dog_chi_contingency <- dog_chi %>% 
  count(Live_Pets, Year_of_Study) %>% 
  pivot_wider(names_from = Live_Pets, values_from = n)

dog_chi_contingency %>% 
  kbl() %>%
  kable_styling()
```


::: {.callout-note collapse="true" icon="false"}

## Hints

```{r eval=FALSE}
dog_chi_contingency <- dog_chi %>% 
  count(???, ???) %>% 
  pivot_wider(names_from = ???, values_from = n)
```


::: {.callout-caution collapse="true" icon="false"}

## Solution

```{r eval=FALSE}
# Task 5: Frequency table
dog_chi_contingency <- dog_chi %>% 
  count(Live_Pets, Year_of_Study) %>% 
  pivot_wider(names_from = Live_Pets, values_from = n)
```

:::

:::


## Task 6: Check assumptions {.unnumbered}


1. Both variables should be categorical, measured at either the ordinal or nominal level. Answer: `r mcq(c(answer = "yes", x = "no"))` as `Year_of_Study` is `r mcq(c(answer = "ordinal", x = "nominal"))`, and `Live_Pets` is `r mcq(c(x = "ordinal", answer = "nominal"))`.

2. Each observation in the dataset has to be independent, meaning the value of one observation does not affect the value of any other. Answer: `r mcq(c(answer = "yes", x = "no"))`

3. Cells in the contingency table are mutually exclusive. Answer: `r mcq(c(answer = "yes", x = "no"))` because each individual can belong to `r mcq(c(x = "multiple cells", answer = "only one cell"))` in the contingency table.


## Task 7: Compute a chi-square test & interpret the output {.unnumbered}

* **Step 1**: Use the function `as.data.frame` to turn `dog_chi` into a dataframe. Store this output in a new data object called `dog_chi_df`.


::: {.callout-note collapse="true" icon="false"}

## Hints

```{r eval=FALSE}
??? <- as.data.frame(???)
```


::: {.callout-caution collapse="true" icon="false"}

## Solution

```{r}
dog_chi_df <- as.data.frame(dog_chi)
```

:::

:::

* **Step 2**: Run the `associationTest()` function from the `lsr` package to compute the Chi-Square test. The structure of the function is as follows:

```{r eval=FALSE}
associationTest(formula = ~ Variable1 + Variable2, data = your_dataframe)
```


::: {.callout-caution collapse="true" icon="false"}

## Solution

```{r eval=FALSE}
associationTest(formula = ~ Year_of_Study + Live_Pets, data = dog_chi_df)
```

:::


* **Step 3**: Interpreting the output


```{r echo=FALSE}
associationTest(formula = ~ Year_of_Study + Live_Pets, data = dog_chi_df)
```


The Chi-Square test revealed that there is `r mcq(c(answer = "a statistically significant association", x = "no statistically significant association"))` between Year of Study and whether students live with pets, $\chi^2$ (`r fitb("4")`) = `r fitb(c("12.28"))`, p = `r fitb(".015")`, V = `r fitb(".209")`. The strength of the association between the variables is considered `r mcq(c(x = "small", answer = "moderate", x = "strong"))`. We therefore `r mcq(c(x = "fail to reject the null hypothesis", answer = "reject the null hypothesis"))`.

